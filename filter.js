const generetingFilterContainer = document.querySelector(
  ".new-catalogForm__generated-filters"
);

function getFilterData(params) {
  // try{
  //    fetch('https://e-metall.ru/api/filters/?pageid=4940')
  //    .then((response)=>response.json())
  //    .then((data)=>{return data})
  // } catch (error){
  return {
    success: true,
    message: "Фильтры успешно получены",
    data: {
      filters: [
        {
          filter_name: "Размер",
          filter_code: "item_diameter",
          filter_help: "Начните вводить диаметр",
          placeholder: "Любой",
          unit: "мм",
          range: ["yes"],
          values: [
            "0,3",
            "0,4",
            "0,5",
            "0,6",
            "0,7",
            "0,8",
            "0,9",
            "0,32",
            "0,36",
            "0,45",
            "0,55",
            "0,66",
            "0,95",
            "1",
            "1,05",
            "1,06",
            "1,1",
            "1,2",
            "1,3",
            "1,4",
            "1,5",
            "1,6",
            "1,7",
            "1,8",
            "1,9",
            "2",
            "2,1",
            "2,2",
            "2,3",
            "2,4",
            "2,5",
            "2,6",
            "2,7",
            "2,8",
            "2,9",
            "2,24",
            "2,25",
            "3",
            "3,1",
            "3,2",
            "3,3",
            "3,4",
            "3,5",
            "3,6",
            "3,7",
            "3,8",
            "3,9",
            "4",
            "4,1",
            "4,2",
            "4,3",
            "4,4",
            "4,5",
            "4,6",
            "4,7",
            "4,8",
            "4,9",
            "4,76",
            "5",
            "5,2",
            "5,3",
            "5,4",
            "5,5",
            "5,6",
            "5,8",
            "6",
            "6,1",
            "6,2",
            "6,4",
            "6,5",
            "6,6",
            "6,8",
            "6,9",
            "6,25",
            "6,35",
            "6х6",
            "7",
            "7,2",
            "7,4",
            "7,5",
            "7,6",
            "7,8",
            "8",
            "8,1",
            "8,2",
            "8,4",
            "8,5",
            "8,6",
            "8,8",
            "8х8",
            "9",
            "9,1",
            "9,2",
            "9,4",
            "9,5",
            "9,6",
            "9,8",
            "9,52",
            "9,53",
            "10",
            "10,2",
            "10,3",
            "10,4",
            "10,5",
            "10,6",
            "10,8",
            "10х6",
            "10х8",
            "10х10",
            "10х15",
            "11",
            "11,2",
            "11,4",
            "11,5",
            "11,6",
            "11,8",
            "12",
            "12,2",
            "12,4",
            "12,5",
            "12,6",
            "12,7",
            "12,8",
            "12х6",
            "12х8",
            "12х10",
            "12х12",
            "13",
            "13,2",
            "13,4",
            "13,5",
            "13,6",
            "13,7",
            "13,8",
            "14",
            "14,1",
            "14,2",
            "14,4",
            "14,5",
            "14,6",
            "14,8",
            "14х8",
            "14х10",
            "14х12",
            "14х14",
            "15",
            "15,2",
            "15,4",
            "15,5",
            "15,6",
            "15,8",
            "15,87",
            "15,88",
            "15х8",
            "15х10",
            "15х15",
            "16",
            "16,2",
            "16,4",
            "16,5",
            "16,6",
            "16,8",
            "16х16",
            "17",
            "17,1",
            "17,2",
            "17,4",
            "17,5",
            "17,6",
            "17,7",
            "17,8",
            "17х8",
            "17х13",
            "17х14",
            "18",
            "18,2",
            "18,4",
            "18,5",
            "18,6",
            "18,8",
            "18х12",
            "19",
            "19,05",
            "19,2",
            "19,4",
            "19,5",
            "19,6",
            "19,8",
            "20",
            "20,2",
            "20,3",
            "20,4",
            "20,5",
            "20,6",
            "20,8",
            "20х0",
            "20х10",
            "20х15",
            "20х20",
            "20х50",
            "21",
            "21,2",
            "21,3",
            "21,4",
            "21,5",
            "21,6",
            "21,7",
            "21,8",
            "21,34",
            "22",
            "22,2",
            "22,4",
            "22,5",
            "22,6",
            "22,8",
            "22,13",
            "22,22",
            "22,23",
            "22х22",
            "23",
            "23,2",
            "23,4",
            "23,5",
            "23,6",
            "23,8",
            "23х10",
            "24",
            "24,2",
            "24,4",
            "24,5",
            "24,6",
            "24,8",
            "25",
            "25,2",
            "25,3",
            "25,4",
            "25,5",
            "25,7",
            "25х",
            "25х0",
            "25х10",
            "25х12",
            "25х15",
            "25х20",
            "25х25",
            "26",
            "26,2",
            "26,5",
            "26,7",
            "26,8",
            "26,9",
            "26,67",
            "27",
            "27,2",
            "27,5",
            "27,7",
            "27х27",
            "28",
            "28,2",
            "28,5",
            "28,7",
            "28,57",
            "28х",
            "28х22",
            "28х25",
            "29",
            "29,2",
            "29,5",
            "29,7",
            "30",
            "30,2",
            "30,5",
            "30,7",
            "30х0",
            "30х10",
            "30х15",
            "30х20",
            "30х30",
            "31",
            "31,2",
            "31,5",
            "31,7",
            "31,8",
            "32",
            "32,2",
            "32,5",
            "32,7",
            "33",
            "33,2",
            "33,4",
            "33,5",
            "33,5х9,5",
            "33,7",
            "33х23",
            "34",
            "34,2",
            "34,5",
            "34,7",
            "34,93",
            "35",
            "35,2",
            "35,5",
            "35,7",
            "35,9",
            "35х10",
            "35х15",
            "35х25",
            "35х35",
            "36",
            "36,2",
            "36,5",
            "36,7",
            "36х24",
            "37",
            "37,1",
            "37,2",
            "37,5",
            "37,7",
            "38",
            "38,2",
            "38,5",
            "38,7",
            "38х18",
            "39",
            "39,2",
            "39,5",
            "39,7",
            "40",
            "40,2",
            "40,5",
            "40,7",
            "40х0",
            "40х10",
            "40х15",
            "40х20",
            "40х25",
            "40х30",
            "40х40",
            "41",
            "41,2",
            "41,5",
            "41,7",
            "41,25",
            "42",
            "42,2",
            "42,3",
            "42,4",
            "42,5",
            "42,7",
            "43",
            "43,2",
            "43,5",
            "43,7",
            "44",
            "44,2",
            "44,5",
            "44,7",
            "45",
            "45,2",
            "45,5",
            "45,7",
            "45х0",
            "45х10",
            "45х25",
            "46",
            "46,2",
            "46,5",
            "46,7",
            "47",
            "47,1",
            "47,2",
            "47,5",
            "47,7",
            "48",
            "48,2",
            "48,3",
            "48,5",
            "48,6",
            "48,7",
            "48,26",
            "49",
            "49,2",
            "49,5",
            "49,7",
            "50",
            "50,2",
            "50,5",
            "50,7",
            "50,8",
            "50х0",
            "50х10",
            "50х13",
            "50х15",
            "50х20",
            "50х25",
            "50х30",
            "50х40",
            "50х50",
            "50х50R30",
            "50х100",
            "51",
            "51,2",
            "51,5",
            "51,7",
            "52",
            "52,2",
            "52,5",
            "52,7",
            "53",
            "53,2",
            "53,5",
            "53,7",
            "54",
            "54,2",
            "54,5",
            "54,7",
            "55",
            "55,2",
            "55,5",
            "55,7",
            "56",
            "56,2",
            "56,5",
            "56,7",
            "57",
            "57,2",
            "57,5",
            "57,7",
            "58",
            "58,2",
            "58,5",
            "58,7",
            "58,8х58,8",
            "59",
            "59,2",
            "59,5",
            "59,7",
            "60",
            "60,2",
            "60,3",
            "60,4",
            "60,5",
            "60,6",
            "60,8",
            "60х0",
            "60х10",
            "60х20",
            "60х25",
            "60х30",
            "60х40",
            "60х50",
            "60х60",
            "60х60х60",
            "61",
            "61,2",
            "61,4",
            "61,6",
            "61,8",
            "62",
            "62,2",
            "62,4",
            "62,6",
            "62,8",
            "63",
            "63,2",
            "63,4",
            "63,5",
            "63,6",
            "63,8",
            "64",
            "64,2",
            "64,4",
            "64,6",
            "64,8",
            "65",
            "65,2",
            "65,4",
            "65,6",
            "65,8",
            "66",
            "66,2",
            "66,4",
            "66,6",
            "66,8",
            "67",
            "67,2",
            "67,4",
            "67,5",
            "67,6",
            "67,8",
            "68",
            "68,2",
            "68,4",
            "68,6",
            "68,8",
            "69",
            "69,2",
            "69,4",
            "69,5",
            "69,6",
            "69,8",
            "70",
            "70,2",
            "70,4",
            "70,6",
            "70,8",
            "70х30",
            "70х50",
            "70х70",
            "71",
            "71,2",
            "71,4",
            "71,6",
            "71,8",
            "72",
            "72,2",
            "72,4",
            "72,6",
            "72,8",
            "73",
            "73,02",
            "73,03",
            "73,2",
            "73,4",
            "73,6",
            "73,8",
            "74",
            "74,2",
            "74,4",
            "74,6",
            "74,8",
            "75",
            "75,2",
            "75,4",
            "75,6",
            "75,8",
            "75х25",
            "75х42",
            "76",
            "76,1",
            "76,2",
            "76,4",
            "76,6",
            "76,8",
            "76х4",
            "77",
            "77,2",
            "77,4",
            "77,6",
            "77,8",
            "78",
            "78,2",
            "78,4",
            "78,6",
            "78,8",
            "79",
            "79,2",
            "79,4",
            "79,6",
            "79,8",
            "80",
            "80х20",
            "80х30",
            "80х40",
            "80х50",
            "80х60",
            "80х80",
            "81",
            "82",
            "82,5",
            "83",
            "84",
            "85",
            "86",
            "88",
            "88,9",
            "89",
            "89,5",
            "89,9",
            "89х4",
            "89х4,5",
            "89х5",
            "90",
            "90х30",
            "90х40",
            "90х50",
            "90х60",
            "90х90",
            "90х90х90",
            "91",
            "92",
            "92,5",
            "93",
            "93,2",
            "94",
            "95",
            "96",
            "98",
            "100",
            "100,2",
            "100х20",
            "100х25",
            "100х30",
            "100х40",
            "100х50",
            "100х60",
            "100х80",
            "100х100",
            "100х140",
            "100х150",
            "101,6",
            "102",
            "102,4",
            "103",
            "104",
            "105",
            "106",
            "108",
            "108х5",
            "108х6",
            "110",
            "110,2",
            "110х30",
            "110х70",
            "110х110",
            "112",
            "113",
            "114",
            "114,3",
            "115",
            "115х42",
            "116",
            "117",
            "118",
            "120",
            "120х0",
            "120х20",
            "120х40",
            "120х50",
            "120х60",
            "120х80",
            "120х120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "130,5",
            "131",
            "132",
            "133",
            "135",
            "136",
            "137",
            "138",
            "139",
            "139,7",
            "140",
            "140х60",
            "140х80",
            "140х100",
            "140х110",
            "140х120",
            "140х140",
            "140х180",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "146,05",
            "149",
            "150",
            "150х50",
            "150х80",
            "150х100",
            "150х150",
            "152",
            "153,7",
            "154",
            "155",
            "159",
            "160",
            "160х60",
            "160х80",
            "160х100",
            "160х120",
            "160х140",
            "160х160",
            "161",
            "162",
            "163",
            "165",
            "166",
            "168",
            "168,3",
            "168,28",
            "168х",
            "168х4",
            "168х5",
            "170",
            "171",
            "172",
            "175",
            "176",
            "177,8",
            "178",
            "180",
            "180х60",
            "180х80",
            "180х100",
            "180х120",
            "180х125",
            "180х140",
            "180х150",
            "180х180",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "190",
            "192",
            "193",
            "193,7",
            "193,68",
            "194",
            "194,5",
            "195",
            "196",
            "198",
            "200",
            "200х100",
            "200х120",
            "200х150",
            "200х160",
            "200х200",
            "203",
            "204",
            "205",
            "210",
            "212",
            "214",
            "215",
            "216",
            "216,3",
            "218",
            "219",
            "219,08",
            "219,1",
            "220",
            "220х140",
            "223",
            "224",
            "225",
            "226",
            "228",
            "230",
            "232",
            "235",
            "237",
            "240",
            "240х120",
            "240х160",
            "244,5",
            "244,48",
            "245",
            "248",
            "250",
            "250х150",
            "250х250",
            "251",
            "254",
            "255",
            "256",
            "259",
            "260",
            "260х130",
            "265",
            "267",
            "267,4",
            "268",
            "270",
            "273",
            "273,1",
            "275",
            "276",
            "280",
            "285",
            "286",
            "289",
            "290",
            "298,5",
            "299",
            "300",
            "300х100",
            "300х200",
            "300х300",
            "302",
            "304",
            "304,8",
            "305",
            "306",
            "308",
            "315",
            "317,5",
            "318",
            "320",
            "320х180",
            "323",
            "323,8",
            "323,9",
            "323,85",
            "324",
            "325",
            "325,9",
            "328",
            "330",
            "335",
            "339",
            "340",
            "345",
            "348",
            "350",
            "350х250",
            "350х300",
            "350х350",
            "351",
            "355",
            "355,6",
            "356",
            "357",
            "360",
            "365",
            "370",
            "377",
            "380",
            "390",
            "395",
            "400",
            "400х200",
            "400х400",
            "402",
            "406",
            "406,4",
            "408",
            "410",
            "417",
            "419",
            "420",
            "423",
            "425",
            "426",
            "430",
            "435",
            "438",
            "440",
            "445",
            "450",
            "455",
            "456",
            "457",
            "457,2",
            "460",
            "465",
            "470",
            "475",
            "478",
            "480",
            "485",
            "488",
            "490",
            "495",
            "500",
            "500х500",
            "502",
            "508",
            "510",
            "520",
            "523",
            "530",
            "535",
            "540",
            "550",
            "559",
            "559,8",
            "560",
            "572",
            "575",
            "580",
            "585",
            "590",
            "600",
            "609",
            "609,6",
            "609,9",
            "610",
            "615",
            "620",
            "622",
            "623",
            "625",
            "628",
            "630",
            "633",
            "640",
            "650",
            "660",
            "662",
            "670",
            "675",
            "680",
            "700",
            "710",
            "711",
            "720",
            "750",
            "755",
            "760",
            "762",
            "765",
            "785",
            "800",
            "800,1",
            "810",
            "812",
            "812,8",
            "813",
            "820",
            "830",
            "860",
            "864",
            "900",
            "914",
            "916",
            "920",
            "930",
            "1000",
            "1010",
            "1016",
            "1020",
            "1067",
            "1100",
            "1118",
            "1120",
            "1168",
            "1219",
            "1219,2",
            "1220",
            "1280",
            "1320",
            "1321",
            "1420",
            "1422",
            "1500",
            "1520",
            "1524",
            "1600",
            "1620",
            "1626",
            "1720",
            "1727",
            "1820",
            "1829",
            "1920",
            "1930",
            "2000",
            "2020",
            "2032",
            "2120",
            "2134",
            "2200",
            "2220",
            "2235",
            "2320",
            "2337",
            "2420",
            "2438",
            "2520",
            "2540",
            "2620",
            "2720",
            "2820",
            "2920",
            "3000",
            "4064",
            "20320",
          ],
        },
        {
          filter_name: "Толщина стенки",
          filter_code: "item_wall",
          filter_help: "Начните вводить толщину стенки",
          placeholder: "Любая",
          unit: "мм",
          range: ["yes"],
          values: [
            "",
            "0,05",
            "0,06",
            "0,1",
            "0,2",
            "0,3",
            "0,4",
            "0,5",
            "0,6",
            "0,7",
            "0,8",
            "0,9",
            "0,11",
            "0,12",
            "0,13",
            "0,14",
            "0,15",
            "0,16",
            "0,17",
            "0,18",
            "0,19",
            "0,21",
            "0,22",
            "0,23",
            "0,24",
            "0,25",
            "0,26",
            "0,27",
            "0,28",
            "0,29",
            "0,31",
            "0,32",
            "0,33",
            "0,34",
            "0,35",
            "0,36",
            "0,37",
            "0,38",
            "0,39",
            "0,41",
            "0,42",
            "0,43",
            "0,44",
            "0,45",
            "0,46",
            "0,47",
            "0,48",
            "0,49",
            "0,51",
            "0,52",
            "0,53",
            "0,54",
            "0,55",
            "0,56",
            "0,57",
            "0,58",
            "0,59",
            "0,61",
            "0,62",
            "0,63",
            "0,64",
            "0,65",
            "0,66",
            "0,67",
            "0,68",
            "0,69",
            "0,71",
            "0,72",
            "0,73",
            "0,74",
            "0,75",
            "0,76",
            "0,77",
            "0,78",
            "0,79",
            "0,81",
            "0,82",
            "0,83",
            "0,84",
            "0,85",
            "0,86",
            "0,87",
            "0,88",
            "0,89",
            "0,91",
            "0,92",
            "0,93",
            "0,94",
            "0,95",
            "0,96",
            "0,97",
            "0,98",
            "0,99",
            "1",
            "1,02",
            "1,09",
            "1,1",
            "1,2",
            "1,3",
            "1,4",
            "1,5",
            "1,6",
            "1,7",
            "1,8",
            "1,9",
            "1,15",
            "1,22",
            "1,24",
            "1,27",
            "1,35",
            "1,52",
            "1,57",
            "1,65",
            "1,73",
            "1,75",
            "2",
            "2,02",
            "2,1",
            "2,2",
            "2,3",
            "2,4",
            "2,5",
            "2,6",
            "2,7",
            "2,8",
            "2,9",
            "2,11",
            "2,24",
            "2,25",
            "2,31",
            "2,35",
            "2,41",
            "2,45",
            "2,52",
            "2,75",
            "2,77",
            "2,87",
            "2,775",
            "3",
            "3,02",
            "3,05",
            "3,1",
            "3,2",
            "3,3",
            "3,4",
            "3,5",
            "3,6",
            "3,7",
            "3,8",
            "3,9",
            "3,38",
            "3,56",
            "3,68",
            "3,73",
            "3,76",
            "3,91",
            "4",
            "4,05",
            "4,2",
            "4,4",
            "4,5",
            "4,5,6",
            "4,6",
            "4,8",
            "4,37",
            "4,55",
            "4,78",
            "4,85",
            "5",
            "5,08",
            "5,1",
            "5,3",
            "5,4",
            "5,5",
            "5,6",
            "5,6,7,8,9,1",
            "5,8",
            "5,16",
            "5,49",
            "5,54",
            "6",
            "6,02",
            "6,1",
            "6,3",
            "6,4",
            "6,5",
            "6,7",
            "6,7,8",
            "6,7,8,9,1",
            "6,8",
            "6,9",
            "6,35",
            "6,45",
            "6,71",
            "7",
            "7,01",
            "7,1",
            "7,3",
            "7,4",
            "7,5",
            "7,6",
            "7,7",
            "7,8",
            "7,8,9",
            "7,9",
            "7,11",
            "7,14",
            "7,25",
            "7,37",
            "7,62",
            "7,72",
            "7,92",
            "8",
            "8,1",
            "8,2",
            "8,3",
            "8,5",
            "8,6",
            "8,7",
            "8,8",
            "8,9",
            "8,9,1",
            "8,9,10,12",
            "8,38",
            "8,56",
            "8,74",
            "8,94",
            "9",
            "9,09",
            "9,1",
            "9,2",
            "9,3",
            "9,5",
            "9,6",
            "9,9",
            "9,10,11,12",
            "9,17",
            "9,19",
            "9,27",
            "9,35",
            "9,52",
            "9,53",
            "10",
            "10,03",
            "10,2",
            "10,3",
            "10,4",
            "10,5",
            "10,6",
            "10,7",
            "10,8",
            "10,9",
            "10,36",
            "10,54",
            "10,59",
            "11",
            "11,05",
            "11,1",
            "11,4",
            "11,5",
            "11,7",
            "11,13",
            "12",
            "12,1",
            "12,2",
            "12,4",
            "12,5",
            "12,6",
            "12,7",
            "12,9",
            "13",
            "13,5",
            "13,6",
            "13,49",
            "14",
            "14,2",
            "14,3",
            "14,5",
            "14,27",
            "15",
            "15,09",
            "15,4",
            "15,5",
            "15,7",
            "15,9",
            "16",
            "16,2",
            "16,4",
            "16,5",
            "16,6",
            "16,8",
            "17",
            "17,4",
            "17,5",
            "17,8",
            "18",
            "18,2",
            "18,5",
            "18,7",
            "18,26",
            "19",
            "19,05",
            "19,1",
            "19,2",
            "19,3",
            "19,5",
            "20",
            "21",
            "21,3",
            "21,4",
            "21,5",
            "21,6",
            "21,44",
            "22",
            "22,5",
            "22,7",
            "23",
            "23,1",
            "23,2",
            "23,3",
            "23,5",
            "23,7",
            "23,8",
            "24",
            "24,2",
            "24,61",
            "25",
            "25,2",
            "25,4",
            "25,8",
            "26",
            "26,2",
            "26,3",
            "26,19",
            "27",
            "27,3",
            "27,5",
            "27,6",
            "27,7",
            "28",
            "28,5",
            "28,6",
            "29",
            "30",
            "30,2",
            "30,96",
            "31",
            "31,6",
            "32",
            "32,5",
            "32,8",
            "33",
            "33,3",
            "34",
            "35",
            "36",
            "36,3",
            "37",
            "37,5",
            "37,9",
            "38",
            "38,1",
            "38,7",
            "39",
            "40",
            "41",
            "42",
            "42,5",
            "43",
            "44",
            "45",
            "46",
            "47",
            "47,5",
            "48",
            "49",
            "50",
            "50,8",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "62",
            "63",
            "64",
            "65",
            "66",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "88",
            "89",
            "90",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "103",
            "110",
            "113",
            "115",
            "120",
            "122",
            "124",
            "125",
            "130",
            "135",
            "140",
            "142",
            "150",
            "155",
            "160",
            "165",
            "175",
            "200",
            "208",
            "214",
            "220",
            "221",
            "222",
            "230",
            "250",
            "370",
            "1500",
          ],
        },
        {
          filter_name: "Марка",
          filter_code: "item_steel_mark",
          filter_help: "Начните вводить марку",
          placeholder: "Любая",
          unit: "",
          range: [],
          values: [
            "--",
            "000Х18Н11",
            "0Х18Н12Б",
            "1",
            "1-3",
            "1.4301",
            "1.4306",
            "1.4401",
            "1.4404",
            "1.4507",
            "1.4571",
            "1КП",
            "1ПС",
            "1СП",
            "1Х2М1",
            "1Х13",
            "1Х13М",
            "01Х16Н2",
            "2",
            "02",
            "2-3ПС/СП",
            "2П",
            "2ПС",
            "2ПС5",
            "02СП",
            "2СП",
            "02Х17Н14М2-ИД",
            "02Х17Н14М2-ИДД",
            "02Х18Н11-ВИ",
            "02Х18Н11-ВО",
            "02Х18Н40М5Г2ТФРЮ-ИД",
            "02Х18Н40М5Г2ТФРЮ-ИДД",
            "02Х25Н22АМ2-ПТ",
            "3",
            "3ГСП",
            "3КП",
            "3ПС",
            "3ПС5",
            "3СП",
            "3СП2",
            "3СП3",
            "3СП5",
            "03Х11Н10М2Т",
            "03Х12Н10МТР",
            "03Х17Н13М2",
            "03Х17Н13М3",
            "03Х17Н14М2",
            "03Х17Н14М3",
            "03Х18Н11",
            "03Х18Н12",
            "03Х18Н12-ВИ",
            "03Х21Н32М3Б-ВИ",
            "4СП",
            "04Х17Т",
            "04Х19Н11М3",
            "5",
            "5ПС",
            "5СП",
            "05Х12Н2М-ВИ",
            "05Х12Н2М-ПТ",
            "5ХНМ",
            "06ГФБ",
            "06ГФБА",
            "06ГФБА–А",
            "6СП",
            "06Х15Н6МВФБ",
            "06Х16Н15М3Б-ИД",
            "06Х16Н15М3Б-ИШ",
            "06Х18Н10Т",
            "06ХН28МДТ",
            "07Х16Н6",
            "07ХНД",
            "08",
            "08ГБФ-У",
            "08ГФБ",
            "08ГФБ-У",
            "08КП",
            "08ПС",
            "08ПС-5",
            "08ПС-6",
            "08СП",
            "08Х12",
            "08Х13",
            "08Х14МФ",
            "08Х15Н5Д2ТУ",
            "08Х15Н5Д2ТУ-Ш",
            "08Х15НD2ТУ-Ш",
            "08Х16Н11M3",
            "08Х17",
            "08Х17Н13М2",
            "08Х17Н13М2Т",
            "08Х17Т",
            "08Х18Н9",
            "08Х18Н10",
            "08Х18Н10Б",
            "08Х18Н10Т",
            "08Х18Н10Т-ВД",
            "08Х18Н10Т-Ш",
            "08Х18Н12Б",
            "08Х18Н12Т",
            "08Х21Н6М2Т",
            "08Х22Н6Т",
            "08Ю",
            "09Г2",
            "09Г2-1",
            "09Г2Б",
            "09Г2Д",
            "09Г2Д-1",
            "09Г2С",
            "09Г2С-1",
            "09Г2С-12",
            "09Г2С-12-ГС",
            "09Г2С-14",
            "09Г2С-15",
            "09Г2ФБ",
            "9Г2ФБЮ",
            "09Г2ФБЮ",
            "09ГБЮ",
            "09ГС2С",
            "09ГС2С-1",
            "09ГСФ",
            "09ГСФЮ",
            "09ГФБ",
            "09СФА",
            "9Х1",
            "09Х16Н4Б-Ш",
            "09Х18Н9",
            "09Х18Н10",
            "09Х18Н10Т",
            "10",
            "10Г",
            "10Г1",
            "10Г2",
            "10Г2Б",
            "10Г2ФБ",
            "10Г2ФБЮ",
            "10ГН2МФА",
            "10КП",
            "10ПС",
            "10СП",
            "10Х2М",
            "10Х3Г34ФА",
            "10Х5М",
            "10Х9МФБ",
            "10Х9МФБ-Ш",
            "10Х9МФБШ",
            "10Х11Н20Т2Р",
            "10Х11Н20Т3Р",
            "10Х13Г12БС2Н2Д2",
            "10Х13Н3М1Л",
            "10Х14Г14Н4Т",
            "10Х15Н9С3Б1-Ш",
            "10Х17Н13М2",
            "10Х17Н13М2Т",
            "10Х17Н13М3",
            "10Х17Н13М3Т",
            "10Х17Н14М3",
            "10Х19Н11МЧФ",
            "10Х23Н18",
            "10ХМФБ-Ш",
            "10ХСНД",
            "12X2M",
            "12X15Г9НД",
            "12X18H12Б",
            "12Г",
            "12Г2",
            "12Г2С",
            "12Г2С-1",
            "12Г2СБ",
            "12Г2СД-1",
            "12ГБ",
            "12ГБА",
            "12ГС",
            "12ГС-1",
            "12ГФ",
            "12МХ",
            "12ФА",
            "12Х1",
            "12Х1М",
            "12Х1МС",
            "12Х1МФ",
            "12Х1МФ-ПВ",
            "12Х2М",
            "12Х2Н4А",
            "12Х2НВФА",
            "12Х3ГНМФБА",
            "12Х13",
            "12Х13Г12БС2Н2Д2",
            "12Х15Г9НД",
            "12Х17",
            "12Х17Г9АН4",
            "12Х17Г9АН4-Ш",
            "12Х17Т",
            "12Х18Н9",
            "12Х18Н10",
            "12Х18Н10Т",
            "12Х18Н10Т-ВД",
            "12Х18Н10Т-Ш",
            "12Х18Н12Т",
            "12Х20Н76Т",
            "12Х21Н5Т",
            "12Х21Н5Т-ВД",
            "12ХГБ",
            "12ХГБА",
            "12ХМ",
            "12ХН3А",
            "13Г1С",
            "13Г1С-У",
            "13ГФ",
            "13ГФА",
            "13Х",
            "13Х9М",
            "13ХФА",
            "14Г2",
            "14Г2-1",
            "14Г2Ф",
            "14ГФ",
            "14Х3ГНМ",
            "14Х17Н2",
            "14ХГС",
            "15",
            "15Г",
            "15Г1",
            "15Г2",
            "15ГС",
            "15ГС-Ш",
            "15ГФ",
            "15Л",
            "15МО3",
            "15Х",
            "15Х1М1Ф",
            "15Х1М1Ф-Ш",
            "15Х5М",
            "15Х5М-У",
            "15Х5МФБЧ",
            "15Х25Т",
            "15ХА",
            "15ХЛ",
            "15ХМ",
            "15ХФ",
            "16ГС",
            "16ГС-1",
            "16ГС-Ш",
            "16Д",
            "16К",
            "17Г1С",
            "17Г1С-1",
            "17Г1С-У",
            "17Г2С",
            "17Г2С-1",
            "17Г18",
            "17ГС",
            "17ГС-1",
            "18Г2",
            "18ХГТ",
            "20",
            "20-ПВ",
            "20А",
            "20В",
            "20Г",
            "20Г2",
            "20ГЛ",
            "20К",
            "20КСХ",
            "20КТ",
            "20ПВ",
            "20ПС",
            "20С",
            "20СП",
            "20Ф",
            "20ФА",
            "20Х",
            "20Х2МА",
            "20Х2МФА",
            "20Х2Н4А",
            "20Х3МВФ",
            "20Х13",
            "20Х23Н18",
            "20ХГСА",
            "20ХМ",
            "20ХМФА",
            "20ХФ",
            "20ХФА",
            "20ЮЧ",
            "21",
            "22",
            "22ГФ",
            "22ГЮ",
            "22Х2Г2АЮ",
            "22ХГ2А",
            "24Г2",
            "25",
            "25Г",
            "25Г2С",
            "25Г2Ф",
            "25Л",
            "25Х1М1Ф",
            "25Х2ГНМФЛ",
            "25Х2Н4МА",
            "25ХГЛ",
            "25ХГМ",
            "25ХГМА",
            "25ХГСА",
            "25ХГТ",
            "28Х3СНМВФА",
            "29НК",
            "29НК-ВИ)",
            "30",
            "30Г",
            "30Г1",
            "30Г2",
            "30Х",
            "30Х3МФ",
            "30Х18Н10Т",
            "30ХГМА",
            "30ХГНМ",
            "30ХГС",
            "30ХГСА",
            "30ХГСН2А",
            "30ХГСН2АВД",
            "30ХГСН2ВА",
            "30ХМ",
            "30ХМА",
            "30ХН2МА",
            "30ХН2МФА",
            "30ХН3А",
            "32Г2",
            "32Г2С",
            "32ХА",
            "32ХГМА",
            "32ХМА",
            "33ХС",
            "34Х2Н2М",
            "34ХМ1А",
            "34ХМ4",
            "35",
            "35Г",
            "35Г2",
            "35Г2Ф",
            "35Г2ФА",
            "35ГС",
            "35Х",
            "35ХГСА",
            "35ХМ",
            "35ХМЛ",
            "35ХМФА",
            "35ХН3МФА",
            "36Г2С",
            "36НХТЮ",
            "37Г2С",
            "37Г2Ф",
            "38Г2С",
            "38Г2СФ",
            "38Г2СФА",
            "38ГНП",
            "38Х2МЮА",
            "38Х2Н2ВА",
            "38Х2Н2МА",
            "38ХА",
            "38ХГМ",
            "38ХГН",
            "38ХГНМ",
            "38ХМ",
            "38ХМА",
            "38ХН3МА",
            "38ХН3МФ",
            "38ХН3МФА",
            "38ХНМ",
            "38ХС",
            "40",
            "40Г",
            "40Г2",
            "40Х",
            "40Х2Н2МА",
            "40Х13",
            "40Х25Н19Г2СЛ",
            "40Х25Н20С2",
            "40ХГМА",
            "40ХМФА",
            "40ХН",
            "40ХН2МА",
            "40ХН2СВА",
            "42ХНМ",
            "42ХНМ-Ш",
            "45",
            "45Г",
            "45Г2",
            "45Х",
            "45Х25Н20С2",
            "45ХГМА",
            "45ХН",
            "46ХНМ",
            "50",
            "50Г",
            "50Г2",
            "50Х",
            "50ХГЛ",
            "55",
            "60",
            "60Г",
            "60ХГЛ",
            "65",
            "65Г",
            "70",
            "70Г",
            "95Х18",
            "201 (AISI, TP)",
            "202 (AISI, TP)",
            "304 (AISI, TP)",
            "304L (AISI, TP)",
            "310 (AISI, TP)",
            "310S (AISI, TP)",
            "316 (AISI, TP)",
            "316L (AISI, TP)",
            "316TI (AISI, TP)",
            "321 (AISI, TP)",
            "345 (AISI, TP)",
            "347 (AISI, TP)",
            "355",
            "409 (AISI, TP)",
            "430 (AISI, TP)",
            "439 (AISI, TP)",
            "904L (AISI, TP)",
            "1561",
            "1915",
            "1915Т",
            "6060",
            "6063",
            "6063Т6",
            "6082",
            "A106",
            "AISI",
            "AISI 904L",
            "C122",
            "C355",
            "C12200",
            "CU-DHP",
            "DUPLEX 2507",
            "E355",
            "EN 1.4541",
            "GR.6",
            "INCOLOY 800H",
            "J55",
            "L80",
            "L360",
            "L485",
            "N80Q",
            "P5",
            "P110",
            "P255QL",
            "P460NL1",
            "Q125",
            "Q355B",
            "S235J2+M",
            "S235JR",
            "S355",
            "S355J2+M",
            "S355J2H",
            "S355JR",
            "S355MC",
            "SA210 GR A1",
            "SТ52",
            "X52N",
            "X70ME",
            "X80M",
            "ZN140",
            "А5Н",
            "А335",
            "АВТ1",
            "АД1",
            "АД1М",
            "АД31Т",
            "АД31Т1",
            "АК6Т1",
            "АМГ2",
            "АМГ2М",
            "АМГ3",
            "АМГ3М",
            "АМГ5",
            "АМГ5М",
            "АМГ6",
            "АМГ6М",
            "АМЦ",
            "АМЦМ",
            "БРАЖМЦ10-3-1,5",
            "БРАЖН10-4-4",
            "В95",
            "В95Т1",
            "ВГП",
            "ВЕ",
            "ВН-2",
            "ВНС-17",
            "ВТ-6",
            "ВТ1-0",
            "ВТ1-00",
            "ВТ6",
            "ВТ20",
            "Г2",
            "Г2С",
            "ГРN80",
            "ГРN80Q",
            "Д",
            "Д1",
            "Д1М",
            "Д1Т",
            "Д16Т",
            "ДБ",
            "ДИ-6",
            "ДИ-59",
            "Е",
            "Е235",
            "Е355",
            "З0ХГСА",
            "И4",
            "К38",
            "К42",
            "К48",
            "К50",
            "К52",
            "К52-4",
            "К55",
            "К56",
            "К60",
            "К65",
            "К70",
            "К80",
            "Л63",
            "Л68",
            "ЛС59-1",
            "М1",
            "М1Л",
            "М1М",
            "М1Р",
            "М1Т",
            "М1ТВ",
            "М1Ф",
            "М2",
            "М2Р",
            "М3",
            "М3Р",
            "МНЖ5-1",
            "НБ1",
            "НБЦ",
            "НБЦУ",
            "НП2",
            "ОТ4",
            "ОТ4-0",
            "ОТ4-1",
            "ОЦИНКОВАННАЯ",
            "ПС-5",
            "ПС2",
            "ПС5",
            "ПТ-1М",
            "ПТ-7М",
            "ПТ3В",
            "Р5",
            "Р9",
            "Р22",
            "С-2000",
            "С122",
            "С245",
            "С255",
            "С345",
            "С355",
            "С390",
            "С440",
            "С590",
            "СП2",
            "СП28-ВД",
            "СПЛАВ38ХНМ-ИД",
            "СТ.0",
            "СЧ-20",
            "СЧ10",
            "Т60",
            "ТИПАЭИ847-ИШ",
            "ТР347",
            "Х12Н20Т3Р",
            "Х14Г14Н3Т",
            "Х17Н13М2Т",
            "Х17Н13М3Т",
            "Х19Н11М3",
            "Х20Н9Г7Т",
            "Х20Н80",
            "Х25Т",
            "Х52",
            "Х70",
            "Х70М",
            "ХН32Т",
            "ХН45Ю",
            "ХН58М",
            "ХН60ВТ",
            "ХН60ВТ-ВД",
            "ХН65МВУ",
            "ХН77ТЮР",
            "ХН78Т",
            "ЧНХМД",
            "ЧС33-ВИ",
            "ЧС108-ПТ",
            "ЧС116-ИД",
            "ЧС116-ИДД",
            "ЧС129-ИД",
            "ЧУГУН",
            "ШХ10",
            "ШХ15",
            "ШХ15-В",
            "Э110",
            "Э125",
            "ЭИ179",
            "ЭИ229",
            "ЭИ402",
            "ЭИ415",
            "ЭИ417",
            "ЭИ432",
            "ЭИ435",
            "ЭИ439",
            "ЭИ448",
            "ЭИ496",
            "ЭИ643",
            "ЭИ645",
            "ЭИ696",
            "ЭИ702",
            "ЭИ711",
            "ЭИ712",
            "ЭИ810",
            "ЭИ838",
            "ЭИ847-ИД",
            "ЭИ847-ИШ",
            "ЭИ868",
            "ЭИ914",
            "ЭИ943",
            "ЭП-53",
            "ЭП-54",
            "ЭП-410",
            "ЭП-410У",
            "ЭП-591",
            "ЭП288",
            "ЭП302-Ш",
            "ЭП567",
            "ЭП678",
            "ЭП747",
          ],
        },
        {
          filter_name: "Стандарт",
          filter_code: "item_standart",
          filter_help: "Начните вводить стандарт",
          placeholder: "Любой",
          unit: "",
          range: [],
          values: [
            "--",
            "API 5L",
            "API SPEC5",
            "ASTM A210",
            "ASTM A213",
            "ASTM A312",
            "ASTM A333",
            "ASTM A335",
            "ASTM A335 P5",
            "ASTM A335 P11",
            "ASTM A355 P5",
            "ASTM A355-P5",
            "ASTM A 554",
            "ASTM A691",
            "ASTM B68",
            "DIN 582",
            "DIN 11850",
            "DIN 17456",
            "DIN 17458",
            "DIN EN 10217-7",
            "DIN EN 10357",
            "EN 573",
            "EN 755",
            "EN 10210",
            "EN 10216",
            "EN 10217",
            "EN 10219",
            "EN 10296",
            "EN 10305",
            "EN 10357",
            "EN ASTM",
            "EN ISO 3183",
            "АSTM А240",
            "АSTM А312",
            "ГОСТ 2.124-2014",
            "ГОСТ 9.307",
            "ГОСТ 494",
            "ГОСТ 550",
            "ГОСТ 617",
            "ГОСТ 632",
            "ГОСТ 633",
            "ГОСТ 799",
            "ГОСТ 800",
            "ГОСТ 880",
            "ГОСТ 1050",
            "ГОСТ 1075",
            "ГОСТ 1208",
            "ГОСТ 3262",
            "ГОСТ 3282",
            "ГОСТ 8617",
            "ГОСТ 8639",
            "ГОСТ 8642",
            "ГОСТ 8644",
            "ГОСТ 8645",
            "ГОСТ 8723",
            "ГОСТ 8731",
            "ГОСТ 8731В",
            "ГОСТ 8732",
            "ГОСТ 8733",
            "ГОСТ 8734",
            "ГОСТ 8735",
            "ГОСТ 8736",
            "ГОСТ 8737",
            "ГОСТ 8738",
            "ГОСТ 8739",
            "ГОСТ 8740",
            "ГОСТ 8741",
            "ГОСТ 8742",
            "ГОСТ 8743",
            "ГОСТ 8744",
            "ГОСТ 8745",
            "ГОСТ 9567",
            "ГОСТ 9940",
            "ГОСТ 9941",
            "ГОСТ 10210",
            "ГОСТ 10498",
            "ГОСТ 10704",
            "ГОСТ 10705",
            "ГОСТ 10706",
            "ГОСТ 10707",
            "ГОСТ 10708",
            "ГОСТ 10709",
            "ГОСТ 10710",
            "ГОСТ 10711",
            "ГОСТ 10712",
            "ГОСТ 10713",
            "ГОСТ 10714",
            "ГОСТ 10715",
            "ГОСТ 10716",
            "ГОСТ 10717",
            "ГОСТ 10719",
            "ГОСТ 10720",
            "ГОСТ 10721",
            "ГОСТ 10722",
            "ГОСТ 10723",
            "ГОСТ 10725",
            "ГОСТ 11068",
            "ГОСТ 11383",
            "ГОСТ 13363",
            "ГОСТ 13663",
            "ГОСТ 13664",
            "ГОСТ 14162",
            "ГОСТ 14637",
            "ГОСТ 16523",
            "ГОСТ 17217",
            "ГОСТ 18475",
            "ГОСТ 18482",
            "ГОСТ 19277",
            "ГОСТ 19482",
            "ГОСТ 19903",
            "ГОСТ 20295",
            "ГОСТ 21646",
            "ГОСТ 22233",
            "ГОСТ 22897",
            "ГОСТ 23270",
            "ГОСТ 24030",
            "ГОСТ 25577",
            "ГОСТ 27772",
            "ГОСТ 30244",
            "ГОСТ 30245",
            "ГОСТ 30732",
            "ГОСТ 31446",
            "ГОСТ 31447",
            "ГОСТ 32528",
            "ГОСТ 32678",
            "ГОСТ 32931",
            "ГОСТ 33228",
            "ГОСТ 33229",
            "ГОСТ 54861",
            "ГОСТ 54864",
            "ГОСТ 58064",
            "ГОСТ 87323",
            "ГОСТ ISO 3183",
            "ГОСТ Р 53366",
            "ГОСТ Р 54157",
            "ГОСТ Р 54159",
            "ГОСТ Р 54864",
            "ГОСТ Р 58064",
            "ГОСТ Р 70731.2",
            "ОСТ 1 90050",
            "ОСТ 1 90065",
            "ОСТ 1 92002",
            "ОСТ 1 92096",
            "ОСТ 1-90050-72",
            "ОСТ 1.90038",
            "ОСТ 1.92048",
            "ПНСТ 394",
            "ПНСТ 453",
            "ПНСТ 454",
            "СТО 00186217-477",
            "СТО 00186217-477-2019",
            "ТС 1",
            "ТС 153-11-2002-05-15",
            "ТУ 00186217-477-2019",
            "ТУ 00244676-107-2021",
            "ТУ 0976-124-05757848-2014",
            "ТУ 1-2-639-2010",
            "ТУ 1-801-176-03",
            "ТУ 2 СОРТ",
            "ТУ 3-923-75",
            "ТУ 13-3Р-1421",
            "ТУ 14-001-00244676-03",
            "ТУ 14-1-406-2020",
            "ТУ 14-2Р-328-97",
            "ТУ 14-3-197-79",
            "ТУ 14-3-211-74",
            "ТУ 14-3-258-74",
            "ТУ 14-3-411-75",
            "ТУ 14-3-457-76",
            "ТУ 14-3-460-2009",
            "ТУ 14-3-460:2009",
            "ТУ 14-3-463-2005",
            "ТУ 14-3-489-76",
            "ТУ 14-3-571",
            "ТУ 14-3-674-78",
            "ТУ 14-3-675-78",
            "ТУ 14-3-733-78",
            "ТУ 14-3-820-79",
            "ТУ 14-3-843-79",
            "ТУ 14-3-900-80",
            "ТУ 14-3-915-80",
            "ТУ 14-3-972-80",
            "ТУ 14-3-1010-81",
            "ТУ 14-3-1045-05",
            "ТУ 14-3-1070-81",
            "ТУ 14-3-1077-81",
            "ТУ 14-3-1084-82",
            "ТУ 14-3-1120-82",
            "ТУ 14-3-1128-07",
            "ТУ 14-3-1128-82",
            "ТУ 14-3-1270-2001",
            "ТУ 14-3-1334-85",
            "ТУ 14-3-1354-85",
            "ТУ 14-3-1371-2007",
            "ТУ 14-3-1401-86",
            "ТУ 14-3-1433-75",
            "ТУ 14-3-1618-89",
            "ТУ 14-3-1622-89",
            "ТУ 14-3-1698-2000",
            "ТУ 14-3P-124-2017",
            "ТУ 14-3Р-44-2001",
            "ТУ 14-3Р-46-2001",
            "ТУ 14-3Р-47-2001",
            "ТУ 14-3Р-50-2001",
            "ТУ 14-3Р-51-2001",
            "ТУ 14-3Р-54-01",
            "ТУ 14-3Р-55-2001",
            "ТУ 14-3Р-57-2001",
            "ТУ 14-3Р-62-2002",
            "ТУ 14-3Р-77-2004",
            "ТУ 14-3Р-81-2005",
            "ТУ 14-3Р-82-2005",
            "ТУ 14-3Р-85-2005",
            "ТУ 14-3Р-91-2004",
            "ТУ 14-3Р-96-2007",
            "ТУ 14-3Р-124-2012",
            "ТУ 14-3Р-124-2017",
            "ТУ 14-3Р-125-2012",
            "ТУ 14-3Р-125-2017",
            "ТУ 14-3Р-137-2015",
            "ТУ 14-3Р-157-2018",
            "ТУ 14-3Р-162-173-2019",
            "ТУ 14-3Р-163-2019",
            "ТУ 14-3Р-164-2019",
            "ТУ 14-3Р-167",
            "ТУ 14-3Р-167-2009",
            "ТУ 14-3Р-190-2004",
            "ТУ 14-3Р-197-2001",
            "ТУ 14-3Р-433-75",
            "ТУ 14-3Р-770-2009",
            "ТУ 14-3Р-773-2007",
            "ТУ 14-3Р-1128-2007",
            "ТУ 14-3Р-1270",
            "ТУ 14-3Р-1430-2007",
            "ТУ 14-3Р-1471-2002",
            "ТУ 14-101-535-2004",
            "ТУ 14-105-568-93",
            "ТУ 14-105-692",
            "ТУ 14-105-692-2021",
            "ТУ 14-105-737",
            "ТУ 14-105-737-04",
            "ТУ 14-156-64-2015",
            "ТУ 14-156-77",
            "ТУ 14-156-105-2014",
            "ТУ 14-156-107-2015",
            "ТУ 14-157-61-99",
            "ТУ 14-158-113-99",
            "ТУ 14-158-153-05",
            "ТУ 14-159-89-75",
            "ТУ 14-159-145-09",
            "ТУ 14-159-179-2018",
            "ТУ 14-159-186-89",
            "ТУ 14-159-200-90",
            "ТУ 14-159-243-94",
            "ТУ 14-159-250-95",
            "ТУ 14-159-251-95",
            "ТУ 14-159-252-95",
            "ТУ 14-159-259-95",
            "ТУ 14-159-268-97",
            "ТУ 14-159-276-01",
            "ТУ 14-159-293-2005",
            "ТУ 14-159-295-2004",
            "ТУ 14-159-297-2006",
            "ТУ 14-159-303-2006",
            "ТУ 14-159-329-08",
            "ТУ 14-159-332-2013",
            "ТУ 14-159-351-2010",
            "ТУ 14-159-353-2010",
            "ТУ 14-159-406-2020",
            "ТУ 14-159-769-2008",
            "ТУ 14-159-771-2008",
            "ТУ 14-159-1128-2008",
            "ТУ 14-159-1327-2010",
            "ТУ 14-162-14-96",
            "ТУ 14-162-68-2000",
            "ТУ 14-162-173-2019",
            "ТУ 14-225-25-97",
            "ТУ 14-105568-93",
            "ТУ 14-ЗР-124-2012",
            "ТУ 14-ЗР-1128-2007",
            "ТУ 15-105-737-04",
            "ТУ 21.20.21-1573-05757848",
            "ТУ 24.20.1-001-52848343-2018",
            "ТУ 24.20.11-025-02650742-2021",
            "ТУ 24.20.11-037-02650742-2019",
            "ТУ 24.20.12.130-007-16427522-2018",
            "ТУ 24.20.13",
            "ТУ 24.20.13-001-01395041-2016",
            "ТУ 24.20.13-001-45951968-2019",
            "ТУ 24.20.13-002-37833456-2018",
            "ТУ 24.20.13-003-41373090-2018",
            "ТУ 24.20.13-004-02650742-23",
            "ТУ 24.20.13-004-11728041-2022",
            "ТУ 24.20.13-013-1228199",
            "ТУ 24.20.13-014-12281990-2019",
            "ТУ 24.20.13-015-12281990-2020",
            "ТУ 24.20.13-017-12281990-2019",
            "ТУ 24.20.13-020-55788825-2017",
            "ТУ 24.20.13-021-12281990-2020",
            "ТУ 24.20.13-022-1228199",
            "ТУ 24.20.13-022-12281990-2023",
            "ТУ 24.20.13-110-065-00186654-19",
            "ТУ 24.20.13-222-05757848-2019",
            "ТУ 24.20.13-228-05757848-2019",
            "ТУ 24.20.13.004-02650742-2023",
            "ТУ 24.20.13.110",
            "ТУ 24.20.13.110-065-00186654-2019",
            "ТУ 24.20.13.110-128-00186654-2019",
            "ТУ 24.20.13.110-369-00186619-2018",
            "ТУ 24.20.13.120-401-00186619-2019",
            "ТУ 24.20.13.130-007-16427522-2018",
            "ТУ 24.20.13.140-398-44320177-2019",
            "ТУ 24.20.13.140-405-00186619-2020",
            "ТУ 24.20.13.140-405-44320177-2020",
            "ТУ 24.20.14-001-00244676-2018",
            "ТУ 24.20.14-001-41625031-2020",
            "ТУ 24.20.14-002-11728041-2021",
            "ТУ 24.20.21-005-01395041",
            "ТУ 24.20.21-006-01395041",
            "ТУ 24.20.21.000-110-00186654-2019",
            "ТУ 24.2013-017-12281990-2019",
            "ТУ 25.11.23-003-81068824-2017",
            "ТУ 27.2-00191135-016",
            "ТУ 48-21-295-82",
            "ТУ 48-21-783-85",
            "ТУ 95.349-2000",
            "ТУ 95.499-2000",
            "ТУ 108.1197-83",
            "ТУ 161-816-20",
            "ТУ 205-2009",
            "ТУ 1128",
            "ТУ 1294-015-05757848-2011",
            "ТУ 1301-039-00212179",
            "ТУ 1303-002-12281990-2014",
            "ТУ 1303-003-12281990",
            "ТУ 1303-006.3-593377520-2003",
            "ТУ 1303-007-12281990-2015",
            "ТУ 1303-008-12281990",
            "ТУ 1308-704-07501107-2011",
            "ТУ 1317",
            "ТУ 1317-006",
            "ТУ 1317-006.1",
            "ТУ 1317-006.1-593377520",
            "ТУ 1317-008-78827746-2015",
            "ТУ 1317-214-0147016-02",
            "ТУ 1317-233-00147016-2002",
            "ТУ 1317-233-0147016-2002",
            "ТУ 1317-169900",
            "ТУ 1319-037-00186619-2016",
            "ТУ 1319-037-00186654-2015",
            "ТУ 1319-369-00186619-2012",
            "ТУ 1319-1128-00186654",
            "ТУ 1319-1128-00186654-2012",
            "ТУ 1333-183-00220302-2013",
            "ТУ 1361-023-00212179-2005",
            "ТУ 1373",
            "ТУ 1373-001-00186588-2002",
            "ТУ 1373-001-002422-17-2016",
            "ТУ 1373-001-00242217-2016",
            "ТУ 1373-001-77808126-2010",
            "ТУ 1373-002-11728041-2015",
            "ТУ 1373-002-40198874-2015",
            "ТУ 1373-002-71251680-2014",
            "ТУ 1380-002-05757848-2004",
            "ТУ 1381-003-47966425",
            "ТУ 1381-003-47966425-2015",
            "ТУ 1381-004-0129-7858-2016",
            "ТУ 1381-004-01297858-2016",
            "ТУ 1381-006-47966425-2006",
            "ТУ 1381-007-05757848-2005",
            "ТУ 1381-009-47966425-2007",
            "ТУ 1381-012-05757848",
            "ТУ 1381-016-00186654-2010",
            "ТУ 1381-018-00186654-2009",
            "ТУ 1381-020-00186654-2011",
            "ТУ 1381-032-85736056-2016",
            "ТУ 1381-036-05757848-2008",
            "ТУ 1381-037-05757848-2013",
            "ТУ 1381-046-05757848-2009",
            "ТУ 1381-049-05757848-2010",
            "ТУ 1381-051-05757848-2016",
            "ТУ 1381-057-05757848",
            "ТУ 1381-057-05757848-2016",
            "ТУ 1381-073-05757848-2014",
            "ТУ 1383-010-48124013-2003",
            "ТУ 1390-012-53570464-2016",
            "ТУ 1390-014-00186654-2015",
            "ТУ 1419-001-53570464-2012",
            "ТУ 1430",
            "ТУ 1493-002-81068824-2014",
            "ТУ 2248-001-49127551-2014",
            "ТУ 2248-012-54432486",
            "ТУ 5768-008-91907504",
            "ТУ 8009.00.001",
            "ТУ У 27.2-05757883-161:2007",
          ],
        },
        {
          filter_name: "Покрытие нерж.",
          filter_code: "item_coverage",
          filter_help: "Начните вводить",
          placeholder: "Любое",
          unit: "",
          range: [],
          values: ["ЗЕРКАЛЬНАЯ", "МАТОВАЯ", "ПОЛИРОВАННАЯ", "ШЛИФОВАННАЯ"],
        },
      ],
      filters_dop: [
        {
          name: "Покрытие",
          name_en: "ocink",
          variants: [
            {
              name_val: "true",
              name_var: "Оцинкованный",
            },
            {
              name_val: "false",
              name_var: "Неоцинк.",
            },
          ],
        },
      ],
    },
  };
  // }
}
const filterData = getFilterData();
const isDesktop = () => window.innerWidth > 768;

// Генерация фильтров
filterData.data.filters.forEach((filter) => {
  const filterDiv = document.createElement("div");
  filterDiv.classList.add("new-catalogForm__filter");
  generetingFilterContainer.append(filterDiv);

  const mobileHeader = document.createElement("div");
  mobileHeader.classList.add("new-catalogForm__filter__mobile-header");
  mobileHeader.innerHTML = `<div class="new-catalogForm__filter__mobile-header__close">
                              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="18" viewBox="0 0 20 18"
                                 fill="none">
                                 <path
                                    d="M8.57073 0.277911C8.95198 -0.0926369 9.57012 -0.0926369 9.95138 0.277911C10.3326 0.648458 10.3326 1.24923 9.95138 1.61978L3.33414 8.05112H19.0237C19.5629 8.05112 20 8.47593 20 8.99996C20 9.52399 19.5629 9.9488 19.0237 9.9488H3.33319L9.9505 16.3802C10.3318 16.7508 10.3318 17.3515 9.9505 17.7221C9.56925 18.0926 8.95111 18.0926 8.56985 17.7221L0.285943 9.67089C-0.0953145 9.30035 -0.0953145 8.69957 0.285943 8.32903C0.294632 8.32059 0.303443 8.31233 0.31237 8.30427L8.57073 0.277911Z"
                                    fill="#212529" />
                              </svg>
                            </div>
                            <p class="new-catalogForm__filter__mobile-header__title">${filter.filter_name}</p>
                            <a href="" class="new-catalogForm__filter__mobile-header__reset">Сбросить</a>`;
  filterDiv.append(mobileHeader);

  const filterName = document.createElement("p");
  filterName.classList.add("new-catalogForm__filter__title");
  filterName.innerHTML = filter.filter_name;
  filterDiv.append(filterName);

  const uiDiv = document.createElement("div");
  uiDiv.classList.add("new-catalogForm__filter__ui");
  filterDiv.append(uiDiv);

  const inputEl = document.createElement("input");
  inputEl.classList.add("new-catalogForm__filter__input");
  inputEl.placeholder = filter.placeholder;
  inputEl.dataset.placeholder = filter.placeholder;
  inputEl.dataset.filter = JSON.stringify({ range: "", list: [] });
  inputEl.dataset.unit = filter.unit;
  inputEl.name = filter.filter_code;
  inputEl.autocomplete = "off";
  uiDiv.append(inputEl);

  const mobileClear = document.createElement("div");
  mobileClear.classList.add("mobile-clear");
  mobileClear.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                            <circle cx="10" cy="10" r="10" fill="#6C757D"/>
                            <path d="M6.48535 6.48535L13.9999 13.9999" stroke="white" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M14 6.48535L6.48541 13.9999" stroke="white" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
                          </svg>`;
  mobileClear.addEventListener("click", (event) => {
    mobileClear
      .closest(".new-catalogForm__filter__ui")
      .querySelector(".new-catalogForm__filter__input").value = "";
  });
  uiDiv.append(mobileClear);

  const wrapper = document.createElement("div");
  wrapper.classList.add("select_wrapper");
  uiDiv.append(wrapper);

  const applyBtn = document.createElement("div");
  applyBtn.classList.add("primary-btn", "mobile-apply");
  applyBtn.innerText = "Готово";
  uiDiv.append(applyBtn);

  if (filter.range[0] === "yes") {
    wrapper.classList.add("ranged");
    const range = document.createElement("div");
    range.innerHTML = `<div class="new-catalogForm__filter__range__text">
                                <p class="new-catalogForm__filter__range__title">
                                    Диапазон
                                </p>
                                <p class="new-catalogForm__filter__range__reset">
                                    Сбросить
                                </p>
                            </div>
                            <div class="new-catalogForm__filter__range__inputs">
                                <input class="new-catalogForm__filter__range__input" placeholder="От">
                                <input class="new-catalogForm__filter__range__input" placeholder="До">
                            </div>`;
    range.classList.add("new-catalogForm__filter__range");
    wrapper.append(range);
  }

  const select = document.createElement("div");
  select.classList.add("new-catalogForm__filter__select");
  wrapper.append(select);

  const commonSearch = document.createElement("div");
  commonSearch.classList.add("new-catalogForm__filter__select__status");
  commonSearch.innerHTML = ` <div class='status_placeholder'>Часто ищут</div>
                              <div class='status_active hidden'>
                                <div class='status_active__counter'>Выбрано:</div>
                                <div class='status_active__reset'>Сбросить</div>
                              </div>
                              <div class="mobile-status">
                                <div class='mobile-status__hint'>Введите значения для поиска по диапазону диаметров.</div>
                                <div class='mobile-status__reset'>Сбросьте диапазон, если хотите вернуться к множественному выбору.</div>
                                <div class="mobile-status__back"></div>
                              </div>`;
  select.append(commonSearch);

  const filterHelp = document.createElement("p");
  filterHelp.classList.add("new-catalogForm__filter__hint");
  filterHelp.innerHTML = filter.filter_help;

  filter.values.forEach((value, index) => {
    const option = document.createElement("span");
    option.dataset.value = value;
    option.classList.add("new-catalogForm__filter__select__option");
    option.innerHTML = value;

    //Убрать когда поменяют бек
    if (index === 0) {
      option.dataset.value = "temp";
      option.innerText = "temp";
    }

    select.append(option);
  });
  filterDiv.append(filterHelp);
});

// Логика звезд
document.addEventListener("DOMContentLoaded", () => {
  const rating = document.querySelector(".rating");
  const stars = rating.querySelectorAll(".star");
  const statBlock = document.querySelector(
    ".catalog-footer__rating__stat__text"
  );
  const globalValue = parseFloat(rating.dataset.value);
  let selectedValue = 0;
  let isRated = localStorage.getItem("userRated") === "true";

  function updateStars(value) {
    stars.forEach((star, index) => {
      star.classList.remove("filled", "half-filled");
      if (index + 1 <= Math.floor(value)) {
        star.classList.add("filled");
      } else if (index < value) {
        star.classList.add("half-filled");
      }
    });
  }

  function updateStatBlock(newRating, newVotes) {
    if (!statBlock) return;
    const spans = statBlock.querySelectorAll(".fw_600");
    if (spans.length >= 2) {
      spans[0].textContent = newRating.toFixed(1);
      spans[1].textContent = newVotes;
    }
  }

  updateStars(
    isRated
      ? parseFloat(localStorage.getItem("userRating")) || globalValue
      : globalValue
  );

  stars.forEach((star, index) => {
    star.addEventListener("mouseover", () => {
      if (isRated) return;
      updateStars(index + 1);
    });

    star.addEventListener("mouseout", () => {
      if (isRated) return;
      updateStars(selectedValue || globalValue);
    });

    star.addEventListener("click", () => {
      if (isRated) return;

      selectedValue = index + 1;
      updateStars(selectedValue);

      fetch("/rate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ rating: selectedValue }),
      })
        .then((res) => {
          if (!res.ok) throw new Error("Failed to submit rating");
          return res.json();
        })
        .then((data) => {
          // Примерный ответ от сервера:
          // { newAverage: 4.7, newVotes: 9 }
          console.log("Rating submitted:", data);
          isRated = true;
          localStorage.setItem("userRated", "true");
          localStorage.setItem("userRating", selectedValue);
          updateStatBlock(data.newAverage, data.newVotes);
        })
        .catch((err) => {
          console.error(err);
          selectedValue = 0;
          updateStars(globalValue);
        });
    });
  });
});

document.addEventListener("DOMContentLoaded", function () {
  setTimeout(function () {
    const block = document.querySelector(".new-catalogForm__loader");
    if (block) {
      block.style.display = "none";
    }
  }, 600);
});

function moreBtnsLogic() {
  const posMoreBtns = document.querySelectorAll(".new-catalog__position-more");

  function handleOutsideClick(event) {
    let clickedInside = false;

    posMoreBtns.forEach((btn) => {
      if (btn.contains(event.target)) {
        clickedInside = true;
      }
    });

    if (!clickedInside) {
      closeAllModals();
      document.removeEventListener("click", handleOutsideClick);
    }
  }

  function closeAllModals() {
    document.querySelectorAll(".more-modal.opened").forEach((modal) => {
      modal.classList.remove("opened");
    });
  }

  posMoreBtns.forEach((btn) => {
    btn.addEventListener("click", (event) => {
      if (event.target === btn || btn.contains(event.target)) {
        if (event.target !== btn) event.stopPropagation();

        const moreModal = btn.querySelector(".more-modal");
        const isOpening = !moreModal.classList.contains("opened");

        closeAllModals();

        if (isOpening) {
          moreModal.classList.add("opened");
          document.addEventListener("click", handleOutsideClick);
        }
      }
    });
  });

  document.querySelectorAll(".more-modal").forEach((modal) => {
    modal.addEventListener("click", (event) => event.stopPropagation());
  });
}
moreBtnsLogic();

/**
 * Универсальная функция для управления модальными окнами
 * @param {Object} options - Настройки
 * @param {string} options.triggerSelector - Селектор элемента-триггера
 * @param {string} options.modalSelector - Селектор модального окна (ищется относительно триггера)
 * @param {string} [options.activeClass='opened'] - Класс активности
 * @param {boolean} [options.closeOnOutsideClick=true] - Закрывать при клике вне
 * @param {boolean} [options.closeOtherModals=true] - Закрывать другие модалки
 */
function toggleModals(options) {
  const {
    triggerSelector,
    modalSelector,
    activeClass = "opened",
    closeOnOutsideClick = true,
    closeOtherModals = true,
  } = options;

  const triggers = document.querySelectorAll(triggerSelector);

  function closeAllModals() {
    document
      .querySelectorAll(`${modalSelector}.${activeClass}`)
      .forEach((modal) => {
        modal.classList.remove(activeClass);
      });
  }

  function findModal(trigger) {
    const innerModal = trigger.querySelector(modalSelector);
    if (innerModal) return innerModal;

    const parentContainer = trigger.parentElement.closest("*");
    if (parentContainer) {
      return parentContainer.querySelector(modalSelector);
    }

    return document.querySelector(modalSelector);
  }

  function handleTriggerClick(event) {
    const trigger = event.target.closest(triggerSelector);
    if (!trigger) return;

    const modal = findModal(trigger);
    if (!modal) {
      console.warn(`Modal not found for trigger:`, trigger);
      return;
    }

    event.stopPropagation();
    const isOpening = !modal.classList.contains(activeClass);

    if (closeOtherModals) {
      closeAllModals();
    }

    modal.classList.toggle(activeClass, isOpening);
  }

  function handleOutsideClick(event) {
    const clickedOnTrigger = event.target.closest(triggerSelector);
    const clickedOnModal = event.target.closest(modalSelector);

    if (!clickedOnTrigger && !clickedOnModal) {
      closeAllModals();
    }
  }

  triggers.forEach((trigger) => {
    trigger.addEventListener("click", handleTriggerClick);
  });

  document.querySelectorAll(modalSelector).forEach((modal) => {
    modal.addEventListener("click", (e) => e.stopPropagation());
  });

  if (closeOnOutsideClick) {
    document.addEventListener("click", handleOutsideClick);
  }

  return {
    closeAllModals,
  };
}
toggleModals({
  triggerSelector: ".tdmobile__numbers .tdmobile__amount .hint-icon",
  modalSelector: ".tdmobile__more__backdrop",
});
toggleModals({
  triggerSelector: ".tdmobile__numbers .tdmobile__price .hint-icon",
  modalSelector: ".tdmobile__more__backdrop",
});
toggleModals({
  triggerSelector: ".tdmobile__more",
  modalSelector: ".tdmobile__more__backdrop",
});

document
  .querySelectorAll(".tdmobile__more__modal__close")
  .forEach((closeIcon) => {
    closeIcon.addEventListener("click", () => {
      closeIcon.parentElement.parentElement.classList.remove("opened");
    });
  });

const modalBackdrops = document.querySelectorAll(".tdmobile__more__backdrop");
modalBackdrops.forEach((backdrop) => {
  backdrop.addEventListener("click", (event) => {
    if (event.target === backdrop) {
      backdrop.classList.remove("opened");
    }
  });
});

document
  .querySelectorAll(".modal-backdrop .modal-close")
  .forEach((closeIcon) => {
    closeIcon.addEventListener("click", () => {
      closeIcon.parentElement.classList.remove("opened");
      closeIcon.parentElement.parentElement.classList.remove("opened");
    });
  });
// Блок модалок
const backdrop = document.querySelector(".modal-backdrop");

backdrop.addEventListener("click", (event) => {
  if (event.target === backdrop) {
    backdrop.classList.remove("opened");
    backdrop.querySelectorAll(".modal-body").forEach((modal) => {
      modal.classList.remove("opened");
    });
  }
});

function openModal(selector) {
  backdrop.classList.add("opened");
  backdrop.querySelector(`.modal-body.${selector}`).classList.add("opened");
}

// Модалка "преимущества подписки"
document
  .querySelector(".new-catalogForm__controls__submit__sub")
  .addEventListener("click", (event) => {
    event.preventDefault();
    openModal("subscribe-adv");
  });

// Модалка "Больше предложений металлопроката"
document.querySelectorAll(".metallbase__get-sub").forEach((blur) => {
  blur.addEventListener("click", (event) => {
    event.preventDefault();
    openModal("metallbase");
  });
});

const brilliantAnimationBtn = backdrop.querySelector(
  ".modal-body.metallbase .primary-btn"
);

brilliantAnimationBtn.addEventListener("click", (event) => {
  event.preventDefault();
  brilliantAnimationBtn.parentElement
    .querySelector(".metallbase__img div")
    .classList.add("active");
});

document.querySelectorAll(".tdmobile__cart.gradient-btn").forEach((btn) => {
  btn.addEventListener("click", (event) => {
    event.preventDefault();
    openModal("subscribe-adv");
  });
});

document.querySelector(".city-btn").addEventListener("click", (event) => {
  event.preventDefault();
  openModal("city");
});

function closeAllWrappers() {
  document.querySelectorAll(".select_wrapper.open").forEach((wrapper) => {
    const input = wrapper
      .closest(".new-catalogForm__filter__ui")
      .querySelector(".new-catalogForm__filter__input");

    input.dataset.filter !== '{"range":"","list":[]}'
      ? input.classList.add("active")
      : input.classList.remove("active");

    wrapper.classList.remove("open");
  });
}

// Обновление url
function updateQueryParams() {
  const filterElements = document.querySelectorAll("[data-filter]");
  const url = new URL(window.location.href);
  const existingParams = new URLSearchParams(url.search);

  const paramsObj = {};
  for (const [key, value] of existingParams.entries()) {
    paramsObj[key] = value;
  }

  filterElements.forEach((element) => {
    try {
      const filterData = JSON.parse(element.getAttribute("data-filter"));
      const name = element.name;

      if (filterData.range && filterData.range !== "") {
        const [min, max] = filterData.range.split("-");
        if (min || max) {
          const rangeString = `${min || ""}-${max || ""}`;
          paramsObj[name] = rangeString;
        } else {
          delete paramsObj[name];
        }
      } else {
        delete paramsObj[name];
      }

      if (filterData.list && filterData.list.length > 0) {
        const rawValue = filterData.list.join("|");
        paramsObj[name] = rawValue;
      } else if (!filterData.range) {
        delete paramsObj[name];
      }

      if (
        !filterData.range &&
        (!filterData.list || filterData.list.length === 0) &&
        element.value
      ) {
        paramsObj[name] = element.value;
      }
    } catch (e) {
      console.error("Ошибка парсинга data-filter:", e);
    }
  });

  const queryString = Object.entries(paramsObj)
    .map(
      ([key, value]) =>
        `${key}=${encodeURIComponent(value)
          .replace(/%2C/g, ",")
          .replace(/%7C/g, "|")
          .replace(/%2D/g, "-")}`
    )
    .join("&");

  const newUrl = `${window.location.pathname}?${queryString}`;
  window.history.pushState({}, "", newUrl);
}
document.querySelectorAll(".new-catalogForm__filter__ui").forEach((filter) => {
  document.removeEventListener("click", handleDocumentClick);

  filter
    .querySelector(".new-catalogForm__filter__input")
    .addEventListener("click", (event) => {
      if (!isDesktop()) {
        // console.dir(true);
        // console.dir();
        if (
          !event.target.parentElement
            .querySelector(".select_wrapper")
            .classList.contains("open")
        ) {
          event.target.blur();
          if (event.target.name === "city") {
            event.target.placeholder = "Найти город";
          }
        } else {
          if (event.target.name === "city") {
            console.log(1213);
            modal = document.querySelector(".modal-backdrop");
            modal.classList.add("opened");
            modal
              .querySelector(".city")
              .classList.add("opened", "opened-from-filter");
            modal.querySelector(".modal__input.catalog__search__input").focus();
          }
        }
      }
      closeAllWrappers();
      filter.querySelector(".select_wrapper").classList.add("open");
      filter.querySelector(".new-catalogForm__filter__select").scrollTop = 0;
      document.addEventListener("click", handleDocumentClick);
    });

  function handleDocumentClick(e) {
    e.stopPropagation();

    const target = e.target;

    // Если клик по .mobile-apply — это внешнее нажатие
    if (target.closest(".mobile-apply")) {
      closeAllWrappers();
      document.removeEventListener("click", handleDocumentClick);
      return;
    }

    const isClickInside = Array.from(
      document.querySelectorAll(
        ".new-catalogForm__filter, .modal-backdrop, .new-catalogForm__filter__mobile-header"
      )
    ).some((wrapper) => wrapper.contains(target));

    if (!isClickInside) {
      const input = filter.querySelector(
        ".new-catalogForm__generated-filters .new-catalogForm__filter__input"
      );
      if (input && input.value.trim() !== "") {
        const newData = JSON.parse(input.dataset.filter);
        newData.list.push(input.value);
        input.dataset.filter = JSON.stringify(newData);
        refreshPlaceholder(input);
        input.value = "";
        console.log(1);
        filter.querySelector(".status_active").classList.remove("hidden");
        filter.querySelector(".status_placeholder").style.display = "none";

        filter.querySelector(".status_active__counter").innerHTML =
          "Выбрано: " + newData.list.length;
      }
      closeAllWrappers();
      document.removeEventListener("click", handleDocumentClick);
    }
  }
});

function refreshPlaceholder(mainInput, onlyRange = false) {
  btnLoaderStart();
  const filterData = JSON.parse(mainInput.dataset.filter);
  const unit = mainInput.dataset.unit || "";

  // Удаляем дубликаты
  const uniqueList = [...new Set(filterData.list)];
  filterData.list = uniqueList;
  mainInput.dataset.filter = JSON.stringify(filterData);

  if (onlyRange && filterData.range) {
    mainInput.placeholder = filterData.range + (unit ? ` ${unit}` : "");
    return;
  }

  if (uniqueList.length === 0) {
    mainInput.placeholder = mainInput.dataset.placeholder;
    return;
  }

  // Получаем ширину поля и вычитаем padding
  const styles = window.getComputedStyle(mainInput);
  const inputWidth = mainInput.getBoundingClientRect().width;
  const paddingLeft = parseFloat(styles.paddingLeft) || 0;
  const paddingRight = parseFloat(styles.paddingRight) || 0;
  const usableWidth = inputWidth - paddingLeft - paddingRight;

  // Средняя ширина одного символа (настроить при необходимости)
  const avgCharWidth = 7;
  const maxChars = Math.floor(usableWidth / avgCharWidth);

  let result = "";
  let count = 0;

  for (let i = 0; i < uniqueList.length; i++) {
    const value = unit ? `${uniqueList[i]} ${unit}` : uniqueList[i];
    const nextPart = (count === 0 ? "" : ", ") + value;

    const suffix =
      i < uniqueList.length - 1 ? `... (${uniqueList.length})` : "";
    if ((result + nextPart + suffix).length > maxChars) {
      result += `... (${uniqueList.length})`;
      break;
    }

    result += nextPart;
    count++;
  }

  mainInput.placeholder = result;
  setTimeout(btnLoaderEnd, 500);
  updateQueryParams();
}

// Выбор фильтров
const containerList = document.querySelectorAll(
  ".new-catalogForm__generated-filters .new-catalogForm__filter__ui"
);
containerList.forEach((container) => {
  const mainInput = container.querySelector(".new-catalogForm__filter__input");
  const detailContainer = container.querySelector(".select_wrapper");
  let optionList = detailContainer.querySelectorAll(
    ".new-catalogForm__filter__select__option"
  );
  const [rangeMin, rangeMax] = detailContainer.querySelectorAll(
    ".new-catalogForm__filter__range__input"
  );
  const resetRange = detailContainer.querySelector(
    ".new-catalogForm__filter__range__reset"
  );

  const statusBlock = detailContainer.querySelector(
    ".new-catalogForm__filter__select__status"
  );

  const statusCounter = statusBlock.querySelector(".status_active__counter");
  const searchStatus = statusBlock.querySelector(".status_placeholder");

  const resetOptions = statusBlock.querySelector(".status_active__reset");

  resetOptions.addEventListener("click", () => {
    btnLoaderStart();
    optionList.forEach((option) => {
      option.classList.remove("active");
      option.style.display = "flex";
    });
    mainInput.dataset.filter = JSON.stringify({ range: "", list: [] });
    refreshPlaceholder(mainInput);
    mainInput.value = "";
    statusCounter.innerHTML = "Выбрано: ";
    searchStatus.innerText = "Часто ищут";
    searchStatus.classList.remove("black");
    statusBlock.querySelector(".status_active").classList.add("hidden");
    searchStatus.style.display = "block";
    setTimeout(btnLoaderEnd, 500);
    updateQueryParams();
  });

  mainInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const value = mainInput.value.trim();
      if (!value) return;

      const filterData = JSON.parse(mainInput.dataset.filter);

      if (!filterData.list.includes(value)) {
        filterData.list.push(value);
      }

      mainInput.dataset.filter = JSON.stringify(filterData);
      statusCounter.innerHTML = "Выбрано: " + filterData.list.length;
      refreshPlaceholder(mainInput);

      let existingOption = Array.from(optionList).find(
        (opt) => opt.dataset.value === value
      );

      if (!existingOption) {
        const newOption = document.createElement("div");
        newOption.className = "new-catalogForm__filter__select__option active";
        newOption.dataset.value = value;
        newOption.textContent = value;
        newOption.style.display = "flex";

        newOption.addEventListener("click", () => {
          const newData = JSON.parse(mainInput.dataset.filter);
          if (newOption.classList.contains("active")) {
            newData.list = newData.list.filter((el) => el !== value);
            newOption.classList.remove("active");
          } else {
            newData.list.push(value);
            newOption.classList.add("active");
          }
          mainInput.dataset.filter = JSON.stringify(newData);
          refreshPlaceholder(mainInput);
          statusCounter.innerHTML = "Выбрано: " + newData.list.length;
        });

        detailContainer
          .querySelector(".new-catalogForm__filter__select")
          .appendChild(newOption);
        optionList = detailContainer.querySelectorAll(
          ".new-catalogForm__filter__select__option"
        );
      } else {
        existingOption.classList.add("active");
      }

      mainInput.value = "";
      optionList.forEach((option) => {
        option.style.display = "flex";
      });
      statusBlock.querySelector(".status_active").classList.remove("hidden");
      searchStatus.style.display = "none";
    }
  });

  // Выбор опции
  optionList.forEach((option) => {
    option.addEventListener("click", () => {
      btnLoaderStart();
      const newData = JSON.parse(mainInput.dataset.filter);
      if (option.classList.contains("active")) {
        newData.list = newData.list.filter(
          (element) => element !== option.dataset.value
        );
        option.classList.remove("active");
      } else {
        newData.list.push(option.dataset.value);
        option.classList.add("active");
      }

      statusCounter.innerHTML = "Выбрано: " + newData.list.length;
      mainInput.dataset.filter = JSON.stringify(newData);
      refreshPlaceholder(mainInput);
      mainInput.value = "";
      optionList.forEach((option) => {
        option.style.display = "flex";
        option.classList.remove("semibold");
      });
      statusBlock.querySelector(".status_active").classList.remove("hidden");
      searchStatus.style.display = "none";
      if (!newData.list.length) {
        statusBlock.querySelector(".status_active").classList.add("hidden");
        searchStatus.style.display = "block";
      }
      setTimeout(btnLoaderEnd, 500);
    });
  });

  function applyRange() {
    if (rangeMin && rangeMax) {
      [rangeMin, rangeMax].forEach((rangeInput) => {
        rangeInput.addEventListener("keydown", (e) => {
          btnLoaderStart();
          if (e.key === "Enter") {
            e.preventDefault();

            const newData = JSON.parse(mainInput.dataset.filter);
            newData.range =
              !rangeMin.value && !rangeMax.value
                ? ""
                : rangeMin.value + " - " + rangeMax.value;

            mainInput.dataset.filter = JSON.stringify(newData);
            refreshPlaceholder(mainInput, true);

            rangeMin.value && rangeMax.value && closeAllWrappers();
          }
          setTimeout(btnLoaderEnd, 500);
        });
      });

      function applyFilters() {
        optionList.forEach((option) => {
          option.style.display = "flex";
        });
      }

      rangeMin.addEventListener("input", () => {
        if (rangeMin.value || rangeMax.value) {
          optionList.forEach((option) => {
            option.style.display = "none";
          });
        } else {
          optionList.forEach((option) => {
            option.style.display = "flex";
          });
        }

        const newData = JSON.parse(mainInput.dataset.filter);
        newData.range =
          !rangeMin.value && !rangeMax.value
            ? ""
            : rangeMin.value + " - " + rangeMax.value;
        mainInput.dataset.filter = JSON.stringify(newData);

        refreshPlaceholder(mainInput, true);
        newData.range
          ? resetRange.classList.add("visible")
          : resetRange.classList.remove("visible");
        updateQueryParams();
      });
      rangeMax.addEventListener("input", (event) => {
        applyFilters();

        if (rangeMin.value || rangeMax.value) {
          optionList.forEach((option) => {
            option.style.display = "none";
          });
        } else {
          optionList.forEach((option) => {
            option.style.display = "flex";
          });
        }

        const newData = JSON.parse(mainInput.dataset.filter);
        newData.range =
          !rangeMin.value && !rangeMax.value
            ? ""
            : rangeMin.value + " - " + rangeMax.value;

        mainInput.dataset.filter = JSON.stringify(newData);
        refreshPlaceholder(mainInput, true);

        newData.range
          ? resetRange.classList.add("visible")
          : resetRange.classList.remove("visible");
        updateQueryParams();
      });

      resetRange.addEventListener("click", () => {
        btnLoaderStart();
        const newData = JSON.parse(mainInput.dataset.filter);
        newData.range = "";
        mainInput.dataset.filter = JSON.stringify(newData);
        resetRange.classList.remove("visible");
        rangeMax.value = "";
        rangeMin.value = "";
        refreshPlaceholder(mainInput);
        applyFilters();
        applyInput();
        updateQueryParams();
        setTimeout(btnLoaderEnd, 500);
      });
    }
  }

  applyRange();

  function applyInput() {
    const formated = mainInput.value.toLowerCase().trim().replaceAll(".", ",");
    optionList.forEach((option) => {
      option.style.display = "none";
      option.classList.remove("semibold");
    });
    optionList.forEach((option) => {
      if (option.dataset.value.toLowerCase().includes(formated)) {
        option.style.display = "flex";
        formated && option.classList.add("semibold");
      }
    });
  }

  mainInput.addEventListener("input", (event) => {
    if (mainInput.value) {
      searchStatus.innerText = "Найдено";
      searchStatus.classList.add("black");
    } else {
      searchStatus.innerText = "Часто ищут";
      searchStatus.classList.remove("black");
    }
    optionList.forEach((option) => {
      option.style.display = "flex";
    });

    applyInput();
  });
});
// Отключение Enter для формы

document.querySelector(".new-catalogForm").addEventListener("submit", (e) => {
  const submitter = e.submitter; // Элемент, вызвавший submit
  if (submitter && submitter.type === "submit") {
    console.log("Форма отправлена через кнопку submit!");
    // Код обработки формы
  } else {
    e.preventDefault(); // Отменить отправку
  }
});

const handleDocumentClick = (e, modal, btn) => {
  if (!modal.contains(e.target) && e.target !== btn) {
    modal.style.display = "none";
    document.removeEventListener("click", handleDocumentClick);
    // Обновлять корзину
  }
};

const cartBtnList = document.querySelectorAll(
  ".btns .cart-btn, .tdmobile__cart"
);
cartBtnList.forEach((btn) => {
  btn.addEventListener("click", (event) => {
    event.preventDefault();
    event.stopPropagation();
    const modal = btn.parentElement.querySelector(".amount-modal");
    modal.style.display = "flex";
    btn.classList.add("inactive");
    btn.innerText = "Изменить";

    document.addEventListener("click", (event) =>
      handleDocumentClick(event, modal, btn)
    );
  });
});

document
  .querySelectorAll(".btns .amount-modal, .tdmobile .amount-modal")
  .forEach((modal) => {
    const deleteCartBtn = modal.querySelector(".amount-modal__delete");

    deleteCartBtn.addEventListener("click", (event) => {
      event.preventDefault();
      modal.style.display = "none";
      document.removeEventListener("click", handleDocumentClick);
      const cartBtn = modal.parentElement.querySelector(".primary-btn");
      cartBtn.classList.remove("inactive");
      cartBtn.innerText = "В корзину";
      // Удалить из корзины
      console.log("Из корзины удалено");
    });

    const cartModalAmount = modal.querySelector(".amount-modal__amount-value");
    const cartModalPlus = modal.querySelector(".amount-modal__plus");
    const cartModalMinus = modal.querySelector(".amount-modal__minus");
    cartModalPlus.addEventListener("click", () => {
      let value = getCartModalValue();
      updateCartModalValue(value + 1);
    });
    cartModalMinus.addEventListener("click", () => {
      let value = getCartModalValue();
      updateCartModalValue(Math.max(0, value - 1));
    });

    function getCartModalValue() {
      let rawValue = cartModalAmount.value.replace(",", ".");
      let parsedValue = parseFloat(rawValue);
      return isNaN(parsedValue) ? 0 : parsedValue;
    }

    function updateCartModalValue(value) {
      cartModalAmount.value = value.toFixed(2).replace(".", ",");
    }
  });

// 1-3
document
  .querySelectorAll(".new-catalogForm__filter__input")
  .forEach((input) => {
    console.log(input.name);
    if (input.name === "item_steel_mark") {
      input
        .closest(".new-catalogForm__filter__ui")
        .querySelectorAll(".new-catalogForm__filter__select__option")
        .forEach((option) => {
          if (option.dataset.value === "1-3") {
            option.innerHTML += `<svg class="hint-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
                                       <circle cx="9" cy="9" r="8.5" stroke="#212529"></circle>
                                       <path d="M8.76141 11.3807H8.76764C9.14714 11.3807 9.45669 11.075 9.45946 10.6938L9.46223 10.3811C9.51487 9.93823 9.82546 9.63145 10.3223 9.17266C10.5218 8.98879 10.7278 8.79835 10.9207 8.5809C11.6149 7.79766 11.7468 6.76408 11.2652 5.8832C10.6866 4.82538 9.36874 4.29665 8.06023 4.59547C7.08794 4.81811 6.37188 5.5366 6.09591 6.56741C5.99723 6.93687 6.21641 7.31671 6.58587 7.41574C6.95533 7.51442 7.33517 7.29524 7.4342 6.92579C7.51592 6.62108 7.74583 6.08819 8.36979 5.94553C8.96709 5.80876 9.73578 5.97185 10.0505 6.54802C10.3237 7.04698 10.064 7.46041 9.88502 7.66228C9.74006 7.82604 9.57013 7.98304 9.39054 8.14896L9.38363 8.15535C8.84589 8.65154 8.17727 9.26892 8.08136 10.2762C8.07928 10.2959 8.07824 10.316 8.07824 10.3357L8.07512 10.682C8.07166 11.0646 8.37914 11.3773 8.76141 11.3807Z" fill="#212529"></path>
                                       <path d="M8.27949 13.2561C8.4076 13.3842 8.58766 13.4569 8.76771 13.4569C8.95123 13.4569 9.12782 13.3842 9.2594 13.2561C9.38751 13.1245 9.46023 12.9479 9.46023 12.7644C9.46023 12.5843 9.38751 12.4043 9.25594 12.2762C8.9997 12.0199 8.53572 12.0199 8.27949 12.2762C8.14791 12.4043 8.0752 12.5843 8.0752 12.7644C8.0752 12.9479 8.14791 13.128 8.27949 13.2561Z" fill="#212529"></path>

                                    </svg>
                                    `;
            const svg = option.querySelector("svg");
            const hint = document.querySelector(
              ".hint-text.onhover-modal.steel-hint"
            );
            svg.addEventListener("mouseenter", () => {
              if (!isDesktop()) return;

              const svgRect = svg.getBoundingClientRect();
              const scrollTop = window.scrollY;
              const scrollLeft = window.scrollX;

              hint.style.left = `${svgRect.right + 8 + scrollLeft}px`;
              hint.style.top = `${svgRect.top + scrollTop}px`;

              hint.style.display = "block";
            });
            svg.addEventListener("click", (event) => {
              if (isDesktop()) return;
              event.preventDefault();
              event.stopPropagation();
              const backdrop = document.querySelector(".modal-backdrop");
              backdrop.classList.add("opened");
              backdrop.querySelector(".steel-hint").classList.add("opened");
            });

            svg.addEventListener("mouseleave", () => {
              if (!isDesktop()) return;
              hint.style.display = "none";
            });
          }
        });
    }
  });

const showFiltersMobile = document.querySelector(".open-filters");
showFiltersMobile.addEventListener("click", (event) => {
  event.preventDefault();
  const form = document.querySelector(".new-catalogForm");
  form.classList.add("mobile_visible");
  form.scrollTop = 0;
});

document
  .querySelector(".new-catalogForm__mobile-header__close")
  .addEventListener("click", (event) => {
    event.preventDefault();
    document
      .querySelector(".new-catalogForm")
      .classList.remove("mobile_visible");
  });

const saveBtn = document.querySelector(
  ".new-catalogForm__controls__search__save"
);

saveBtn.addEventListener("click", (event) => {
  event.preventDefault();
  saveBtn.classList.add("active");
  saveBtn.querySelector("span").innerText = "Поиск сохранен";
});

[
  document.querySelector(
    ".new-catalogForm__sub-filters .new-catalogForm__filter__ui"
  ),
].forEach((container) => {
  const mainInput = container.querySelector(".new-catalogForm__filter__input");
  const detailContainer = container.querySelector(".select_wrapper");
  let optionList = detailContainer.querySelectorAll(
    ".new-catalogForm__filter__select__option"
  );

  const statusBlock = detailContainer.querySelector(
    ".new-catalogForm__filter__select__status"
  );

  const statusCounter = statusBlock.querySelector(".status_active__counter");
  const searchStatus = statusBlock.querySelector(".status_placeholder");

  const resetOptions = statusBlock.querySelector(".status_active__reset");

  function handleResetOptions() {
    optionList.forEach((option) => {
      option.classList.remove("active");
      option.style.display = "flex";
    });
    mainInput.dataset.filter = JSON.stringify({ range: "", list: [] });
    refreshPlaceholder(mainInput);
    mainInput.value = "";
    statusCounter.innerHTML = "Выбрано: ";
    searchStatus.innerText = "Часто ищут";
    searchStatus.classList.remove("black");
    statusBlock.querySelector(".status_active").classList.add("hidden");
    searchStatus.style.display = "block";
  }

  resetOptions.addEventListener("click", handleResetOptions);

  mainInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const value = mainInput.value.trim();
      if (!value) return;

      const filterData = JSON.parse(mainInput.dataset.filter);

      if (!filterData.list.includes(value)) {
        filterData.list.push(value);
      }

      mainInput.dataset.filter = JSON.stringify(filterData);
      statusCounter.innerHTML = "Выбрано: " + filterData.list.length;
      refreshPlaceholder(mainInput);

      let existingOption = Array.from(optionList).find(
        (opt) => opt.dataset.value === value
      );

      if (!existingOption) {
        const newOption = document.createElement("div");
        newOption.className = "new-catalogForm__filter__select__option active";
        newOption.dataset.value = value;
        newOption.textContent = value;
        newOption.style.display = "flex";

        newOption.addEventListener("click", () => {
          const newData = JSON.parse(mainInput.dataset.filter);
          if (newOption.classList.contains("active")) {
            newData.list = newData.list.filter((el) => el !== value);
            newOption.classList.remove("active");
          } else {
            newData.list.push(value);
            newOption.classList.add("active");
          }
          mainInput.dataset.filter = JSON.stringify(newData);
          refreshPlaceholder(mainInput);
          statusCounter.innerHTML = "Выбрано: " + newData.list.length;
        });

        detailContainer
          .querySelector(".new-catalogForm__filter__select")
          .appendChild(newOption);
        optionList = detailContainer.querySelectorAll(
          ".new-catalogForm__filter__select__option"
        );
      } else {
        existingOption.classList.add("active");
      }

      mainInput.value = "";
      optionList.forEach((option) => {
        option.style.display = "flex";
      });
      statusBlock.querySelector(".status_active").classList.remove("hidden");
      searchStatus.style.display = "none";
    }
  });

  optionList.forEach((option) => {
    option.addEventListener("click", () => {
      const newData = JSON.parse(mainInput.dataset.filter);
      if (option.dataset.value === "Любая") {
        handleResetOptions();
        return;
      }
      if (option.classList.contains("active")) {
        newData.list = newData.list.filter(
          (element) => element !== option.dataset.value
        );
        option.classList.remove("active");
      } else {
        newData.list.push(option.dataset.value);
        option.classList.add("active");
      }

      statusCounter.innerHTML = "Выбрано: " + newData.list.length;
      mainInput.dataset.filter = JSON.stringify(newData);
      refreshPlaceholder(mainInput);
      mainInput.value = "";
      optionList.forEach((option) => {
        option.style.display = "flex";
      });
      statusBlock.querySelector(".status_active").classList.remove("hidden");
      searchStatus.style.display = "none";
      if (!newData.list.length) {
        statusBlock.querySelector(".status_active").classList.add("hidden");
        searchStatus.style.display = "block";
      }
    });
  });

  function applyInput() {
    const formated = mainInput.value.toLowerCase().trim().replaceAll(".", ",");
    optionList.forEach((option) => {
      option.style.display = "none";
      option.classList.remove("semibold");
    });
    optionList.forEach((option) => {
      if (option.dataset.value.toLowerCase().includes(formated)) {
        option.style.display = "flex";
        option.classList.add("semibold");
      }
    });
  }

  mainInput.addEventListener("input", (event) => {
    if (mainInput.value) {
      searchStatus.innerText = "Найдено";
      searchStatus.classList.add("black");
    } else {
      searchStatus.innerText = "Часто ищут";
      searchStatus.classList.remove("black");
    }
    optionList.forEach((option) => {
      option.style.display = "flex";
    });

    applyInput();
  });
});

document.querySelectorAll(".mobile-clear").forEach((clearBtn) => {
  const input = clearBtn.parentElement.querySelector(
    ".new-catalogForm__filter__input"
  );
  function toggleVision() {
    input.value === ""
      ? clearBtn.classList.remove("visible")
      : clearBtn.classList.add("visible");
  }
  input.addEventListener("input", toggleVision);
  input.addEventListener("blur", toggleVision);
  clearBtn.addEventListener("click", () => {
    input.value = "";

    clearBtn.parentElement
      .querySelectorAll(".new-catalogForm__filter__select__option")
      .forEach((option) => {
        option.style.display = "flex";
        option.classList.remove("semibold");
      });
    clearBtn.classList.remove("visible");
  });
});

document
  .querySelector(
    ".new-catalogForm__mobile-header .new-catalogForm__mobile-header__reset"
  )
  .addEventListener("click", (event) => {
    event.preventDefault();
    [
      ...document.querySelectorAll(
        ".new-catalogForm__generated-filters .new-catalogForm__filter__input"
      ),
      document.querySelector(
        ".new-catalogForm__sub-filters .new-catalogForm__filter__input"
      ),
    ].forEach((input) => {
      input.dataset.filter = JSON.stringify({ range: "", list: [] });
      input.classList.remove("active");
      input.placeholder = input.dataset.placeholder;
    });
  });

document.querySelectorAll(".mobile-apply").forEach((btn) => {
  btn.addEventListener("click", () => {
    btn.parentElement
      .querySelector(".select_wrapper.open")
      .classList.remove("open");
    const input = btn.parentElement.querySelector(
      ".new-catalogForm__filter__input"
    );
    const enterEvent = new KeyboardEvent("keydown", {
      key: "Enter",
      code: "Enter",
      keyCode: 13,
      which: 13,
      bubbles: true,
      cancelable: true,
    });

    input.dispatchEvent(enterEvent);

    input.dataset.filter !== '{"range":"","list":[]}'
      ? input.classList.add("active")
      : input.classList.remove("active");
  });
});

document
  .querySelectorAll(".new-catalogForm__filter__mobile-header__close")
  .forEach((btn) => {
    btn.addEventListener("click", (event) => {
      btn.parentElement.parentElement
        .querySelector(".select_wrapper.open")
        .classList.remove("open");

      const input = btn.parentElement.parentElement.querySelector(
        ".new-catalogForm__filter__input"
      );
      const enterEvent = new KeyboardEvent("keydown", {
        key: "Enter",
        code: "Enter",
        keyCode: 13,
        which: 13,
        bubbles: true,
        cancelable: true,
      });

      input.dispatchEvent(enterEvent);

      if (input.name === "city") {
        input.placeholder = input.dataset.placeholder;
      }

      input.dataset.filter !== '{"range":"","list":[]}'
        ? input.classList.add("active")
        : input.classList.remove("active");
    });
  });

document
  .querySelectorAll(".new-catalogForm__filter__mobile-header__reset")
  .forEach((btn) => {
    btn.addEventListener("click", (event) => {
      event.preventDefault();
      const detailContainer = btn
        .closest(".new-catalogForm__filter")
        .querySelector(".new-catalogForm__filter__ui");
      let optionList = detailContainer.querySelectorAll(
        ".new-catalogForm__filter__select .new-catalogForm__filter__select__option"
      );
      const mainInput = detailContainer.querySelector(
        ".new-catalogForm__filter__input"
      );

      const statusBlock = detailContainer.querySelector(
        ".new-catalogForm__filter__select__status"
      );

      const statusCounter = statusBlock.querySelector(
        ".status_active__counter"
      );
      const searchStatus = statusBlock.querySelector(".status_placeholder");

      const range = detailContainer.querySelector(
        ".new-catalogForm__filter__range__inputs"
      );
      if (range) {
        range
          .querySelectorAll(".new-catalogForm__filter__range__input")
          .forEach((input) => {
            input.value = "";
          });
      }
      // btnLoader();

      optionList.forEach((option) => {
        option.classList.remove("active");
        option.style.display = "flex";
      });
      mainInput.dataset.filter = JSON.stringify({ range: "", list: [] });
      refreshPlaceholder(mainInput);
      mainInput.value = "";
      statusCounter.innerHTML = "Выбрано: ";
      searchStatus.innerText = "Часто ищут";
      searchStatus.classList.remove("black");
      statusBlock.querySelector(".status_active").classList.add("hidden");
      searchStatus.style.display = "block";
      // btnLoader();
    });
  });

document
  .querySelectorAll(
    ".new-catalogForm__main-filters .new-catalogForm__filter__ui"
  )
  .forEach((detailContainer) => {
    const input = detailContainer.querySelector(
      ".new-catalogForm__filter__input"
    );
    const optionList = detailContainer.querySelectorAll(
      ".new-catalogForm__filter__select__option"
    );

    input.addEventListener("input", () => {
      const formated = input.value.toLowerCase().trim();
      optionList.forEach((option) => {
        option.style.display = "none";
        option.classList.remove("semibold");
      });
      optionList.forEach((option) => {
        if (option.innerText.toLowerCase().includes(formated)) {
          option.style.display = "flex";
          formated && option.classList.add("semibold");
        }
      });
    });
  });

// Баннеры

function createBanner(
  { href, popupText, imgDesktop, imgMobile, imgSrc },
  className
) {
  const a = document.createElement("a");
  a.href = href;
  a.className = `${className} fade-in`;

  if (imgDesktop && imgMobile) {
    const img1 = document.createElement("img");
    img1.src = imgDesktop;
    img1.alt = "";
    img1.className = "banner-desktop";

    const img2 = document.createElement("img");
    img2.src = imgMobile;
    img2.alt = "";
    img2.className = "banner-mobile";

    a.appendChild(img1);
    a.appendChild(img2);
  } else if (imgSrc) {
    const img = document.createElement("img");
    img.src = imgSrc;
    img.alt = "";
    a.appendChild(img);
  }

  const info = document.createElement("div");
  info.className = className.includes("catalog")
    ? "banner-info"
    : "new-catalog__banner-info";
  info.textContent = "Реклама";

  const popup = document.createElement("div");
  popup.className = className.includes("catalog")
    ? "banner-popup onhover-modal"
    : "new-catalog__banner-popup onhover-modal";
  popup.textContent = popupText;

  info.appendChild(popup);
  a.appendChild(info);

  return a;
}

function setupBannerRotation(container, banners, maxVisible = 1, className) {
  let index = 0;
  let intervalId = null;

  function showBanners() {
    const currentBanners = container.querySelectorAll(`.${className}`);
    currentBanners.forEach((banner) => {
      banner.classList.add("fade-out");
      banner.classList.remove("fade-in");
      setTimeout(() => banner.remove(), 500);
    });

    const slice = [];
    for (let i = 0; i < maxVisible; i++) {
      const idx = (index + i) % banners.length;
      slice.push(banners[idx]);
    }

    setTimeout(() => {
      slice.forEach((data) => {
        const banner = createBanner(data, className);
        banner.addEventListener("mouseenter", stopRotation);
        banner.addEventListener("mouseleave", startRotation);
        container.appendChild(banner);
      });
    }, 500);

    index = (index + maxVisible) % banners.length;
  }

  function startRotation() {
    if (!intervalId && banners.length > maxVisible) {
      intervalId = setInterval(showBanners, 5000);
    }
  }

  function stopRotation() {
    clearInterval(intervalId);
    intervalId = null;
  }

  showBanners();
  startRotation();
}

const catalogBannersData = [
  {
    href: "#",
    imgSrc: "./img/banner-small.png",
    popupText:
      "Металл.Кредит, ИНН 9712771890, erid: nWR26TK8SawRQk2nZWW21drBvbYeoQiFF",
  },
  {
    href: "#",
    imgSrc: "./img/banner-small2.png",
    popupText:
      "Металл.Кредит, ИНН 9712771890, erid: nWR26TK8SawRQk2nZWW21drBvbYeoQiFF",
  },
  {
    href: "#",
    imgSrc: "./img/banner-small1.png",
    popupText:
      "Металл.Кредит, ИНН 9712771890, erid: nWR26TK8SawRQk2nZWW21drBvbYeoQiFF",
  },
  {
    href: "#",
    imgSrc: "./img/banner-small2.png",
    popupText:
      "Металл.Кредит, ИНН 9712771890, erid: nWR26TK8SawRQk2nZWW21drBvbYeoQiFF",
  },
];

const bannerContainer = document.querySelector(".new-catalog__banners");
if (bannerContainer) {
  setupBannerRotation(
    bannerContainer,
    catalogBannersData,
    3,
    "new-catalog__banner"
  );
}

const promoBannersData = [
  {
    href: "#1",
    imgDesktop: "./img/banner1.png",
    imgMobile: "./img/banner-small1.png",
    popupText:
      "Металл.Кредит, ИНН 9712771890, erid: nWR26TK8SawRQk2nZWW21drBvbYeoQiFF",
  },
  {
    href: "#2",
    imgDesktop: "./img/banner2.png",
    imgMobile: "./img/banner-small2.png",
    popupText:
      "Металл.Кредит, ИНН 9712771890, erid: nWR26TK8SawRQk2nZWW21drBvbYeoQiFF",
  },
  {
    href: "#3",
    imgDesktop: "./img/banner.png",
    imgMobile: "./img/banner-small.png",
    popupText:
      "Металл.Кредит, ИНН 9712771890, erid: nWR26TK8SawRQk2nZWW21drBvbYeoQiFF",
  },
];

const promoContainers = document.querySelectorAll(".promo");
promoContainers.forEach((container) => {
  setupBannerRotation(container, promoBannersData, 1, "catalog-banner");
});

document.addEventListener("DOMContentLoaded", function () {
  const options = document.querySelectorAll(
    ".catalog-footer__popular__btns .btn-group__option"
  );
  const lists = document.querySelectorAll(
    ".catalog-footer__popular__list-wrapper .catalog-footer__popular__list"
  );

  options.forEach((option) => {
    option.addEventListener("click", () => {
      const selectedType = option.dataset.type;

      lists.forEach((list) => {
        const listType = list.dataset.type;
        if (listType === selectedType) {
          list.style.display = "";
          showLimitedOptions(list);
        } else {
          list.style.display = "none";
        }
      });
    });
  });

  function showLimitedOptions(list) {
    const options = list.querySelectorAll(
      ".catalog-footer__popular__option:not(.show__more-popular)"
    );
    const showMoreBtn = list.querySelector(".show__more-popular");

    options.forEach((el, idx) => {
      el.style.display = idx < 11 ? "" : "none";
    });

    if (options.length > 11 && showMoreBtn) {
      showMoreBtn.style.display = "";
      showMoreBtn.onclick = (event) => {
        event.preventDefault();
        options.forEach((el) => (el.style.display = ""));
        showMoreBtn.style.display = "none";
      };
    } else if (showMoreBtn) {
      showMoreBtn.style.display = "none";
    }
  }

  document
    .querySelector(".catalog-footer__popular__btns .btn-group__option.active")
    ?.click();
});

document.addEventListener("DOMContentLoaded", function () {
  const textBlock = document.querySelector(
    ".catalog-footer__description__text"
  );
  const toggleLink = document.querySelector(
    ".catalog-footer__description__link"
  );

  toggleLink.addEventListener("click", function (e) {
    e.preventDefault();
    textBlock.classList.toggle("expanded");
    toggleLink.textContent = textBlock.classList.contains("expanded")
      ? "Скрыть"
      : "Подробнее";
  });
});

document
  .querySelector(".new-catalogForm__controls__search__reset")
  .addEventListener("click", (event) => {
    event.preventDefault();
    [
      ...document.querySelectorAll(
        ".new-catalogForm__generated-filters .new-catalogForm__filter__input"
      ),
      document.querySelector(
        ".new-catalogForm__sub-filters .new-catalogForm__filter__input"
      ),
    ].forEach((input) => {
      input.dataset.filter = JSON.stringify({ range: "", list: [] });
      input.classList.remove("active");
      input.placeholder = input.dataset.placeholder;
    });
  });

// лоадер на кнопку "Показать предложения"
const btn = document.querySelector(".primary-btn.submit");
const content = btn.querySelector(".content");
const loader = btn.querySelector(".loader");

function btnLoaderStart() {
  content.classList.add("hidden");
  loader.classList.remove("hidden");
}
function btnLoaderEnd() {
  content.classList.remove("hidden");
  loader.classList.add("hidden");
}

// Плашка сверху

const filterForm = document.querySelector(".new-catalogForm");
const stickyMenu = document.querySelector(".filter-sticky-menu");

function updateStickyWidth() {
  const rect = filterForm.getBoundingClientRect();
  // stickyMenu.style.width = `${rect.width}px`;
  stickyMenu.style.left = `${rect.left}px`;
}

function toggleStickyMenu() {
  const rect = filterForm.getBoundingClientRect();

  if (rect.bottom < 0) {
    stickyMenu.classList.add("visible");
    updateStickyWidth();
  } else {
    stickyMenu.classList.remove("visible");
  }
}

window.addEventListener("scroll", toggleStickyMenu);
window.addEventListener("resize", updateStickyWidth);

stickyMenu
  .querySelector(".filter-sticky-menu__btn")
  .addEventListener("click", () => {
    filterForm.scrollIntoView({ behavior: "smooth", block: "start" });
  });

document.querySelectorAll(".tdata").forEach((cell) => {
  const content = cell.querySelector(".tdvalue") || cell;

  cell.addEventListener("mouseenter", () => {
    if (content.scrollWidth > content.clientWidth) {
      cell.classList.add("hover-visible");
    }
  });

  cell.addEventListener("mouseleave", () => {
    cell.classList.remove("hover-visible");
  });
});


let initialViewportHeight = window.visualViewport.height;
const viewport = window.visualViewport;

function updateButtonPosition() {
  const buttons = document.querySelectorAll('.primary-btn.mobile-apply');
  
  // Проверяем, что это iOS устройство
  const isIOS = /iPhone|iPad|iPod/.test(window.navigator.userAgent);
  
  if (!isIOS) {
    // На не-iOS устройствах не меняем позицию
    return;
  }
  
  // Используем VisualViewport для точного определения высоты клавиатуры
  const currentViewportHeight = viewport.height;
  const keyboardHeight = initialViewportHeight - currentViewportHeight;
  
  buttons.forEach(btn => {
    if (keyboardHeight > 100) {
      // Клавиатура открыта
      btn.style.position = 'fixed';
      btn.style.bottom = `${keyboardHeight + 16}px`; // 16px отступ над клавиатурой
    } else {
      // Клавиатура закрыта
      btn.style.position = 'fixed';
      btn.style.bottom = '24px';
    }
  });
}

// Инициализация
document.addEventListener('DOMContentLoaded', () => {
  initialViewportHeight = window.visualViewport.height;
  updateButtonPosition();
});

// Отслеживание изменений VisualViewport
window.visualViewport.addEventListener('resize', updateButtonPosition);

// Отслеживание скролла (для iOS)
window.addEventListener('scroll', updateButtonPosition);

// Обработка потери фокуса
document.addEventListener('focusout', (e) => {
  if (e.target.tagName === 'INPUT' || 
      e.target.tagName === 'TEXTAREA' ||
      e.target.contentEditable === 'true') {
    setTimeout(updateButtonPosition, 100);
  }
});

// Обработка получения фокуса
document.addEventListener('focusin', (e) => {
  if (e.target.tagName === 'INPUT' || 
      e.target.tagName === 'TEXTAREA' ||
      e.target.contentEditable === 'true') {
    setTimeout(updateButtonPosition, 100);
  }
});